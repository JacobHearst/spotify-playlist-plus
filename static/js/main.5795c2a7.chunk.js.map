{"version":3,"sources":["Endpoints/AxiosConfig.ts","Endpoints/Playlists.ts","Services/PlaylistService.ts","Components/Shared/Navbar.tsx","Services/Utility.ts","Constants/Symbols.ts","Endpoints/Player.ts","Components/Shared/PlayerButton.tsx","Components/Shared/TrackList/TrackTableItem.tsx","Components/Shared/TrackList/TrackTable.tsx","Components/Pages/Playlist/PlaylistHeader.tsx","Components/Pages/Playlist/PlaylistZeroState.tsx","Components/Pages/Playlist/PlaylistPage.tsx","Components/Pages/Album/AlbumPage.tsx","Models/Authentication.ts","Components/Shared/LandingPage.tsx","Endpoints/Artists.ts","Services/ArtistService.ts","Components/Pages/Artist/ArtistPage.tsx","Components/Pages/Home/HomePage.tsx","Constants/Constants.ts","Endpoints/Authorization.ts","Services/AuthService.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["axiosInstance","axios","create","interceptors","response","use","error","console","log","Promise","reject","PlaylistEndpoints","id","get","PlaylistService","getPlaylistById","tracks","data","items","Navbar","pageURL","to","msToSentence","ms","msInDay","msInHour","labelParts","pluralize","count","days","Math","floor","push","remainder","hours","minutes","seconds","length","join","msToTimestamp","labelValues","map","value","index","TrackSymbols","basePlaybackURL","PlayerButton","props","state","playerButtonClicked","bind","this","currentlyPlaying","put","setState","Button","variant","onClick","Pause","Play","React","Component","TrackTableItem","track","artistNames","artists","artist","name","track_number","album","duration_ms","TrackTable","Table","hover","PlaylistHeader","playlist","description","owner","playlistLength","forEach","Row","style","marginBottom","Col","xs","Image","src","images","url","width","height","border","display_name","PlaylistZeroState","PlaylistPage","playlistId","match","params","loadPlaylist","getPlaylist","then","Container","fluid","AlbumPage","AuthenticationContext","createContext","undefined","LandingPage","Consumer","context","href","tokenRetriever","redirect_url","disabled","baseURL","ArtistEndpoints","ArtistService","getArtistById","getArtistTopTracks","ArtistPage","artistId","loadArtist","loadTopTracks","getArtist","catch","topTracks","Fragment","genres","popularity","coverImages","sm","find","image","md","lg","coverImage","genreBadges","genre","Badge","marginRight","as","HomePage","logOut","contextType","clientId","config","redirectUri","getAuthenticationToken","a","post","headers","AuthService","verifier","randomString","document","cookie","split","filter","startsWith","scopeString","scopes","encodeURIComponent","sha256","hash","code_challenge","base64urlencode","randomNumbers","Uint8Array","window","crypto","getRandomValues","possibleCharacters","offset","i","abs","TextEncoder","encode","subtle","digest","values","btoa","String","fromCharCode","apply","replace","token","callback","expireTimeInMs","expires_in","refreshTime","setTimeout","grant_type","refresh_token","client_id","newToken","code","redirect_uri","code_verifier","App","getVerifierCookie","createCodeVerifierCookie","URLSearchParams","location","search","exchangeCodeForToken","authToken","refreshTokenCallback","defaults","common","access_token","constructAuthorizationURI","landingElement","Provider","exact","path","component","refreshTimer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5795c2a7.chunk.js","sourcesContent":["import axios from \"axios\"\nimport { AuthenticationContextObject } from \"../Models/Authentication\"\n\nconst axiosInstance = axios.create({})\n\n// set authorization header so that we don't have to specify it with every request\nexport function initAxios(context: AuthenticationContextObject) {\n    if (context.authToken) {\n        axiosInstance.defaults.headers.common[\"Authorization\"] = \"Bearer \" + context.authToken.access_token\n    }\n}\n\n// default error handling for responses\naxiosInstance.interceptors.response.use((response) => {return response}, (error) => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\nexport default axiosInstance\n","import { GetPlaylistResponse } from \"../Models/Responses/PlaylistResponses\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/playlists\"\n\nexport default class PlaylistEndpoints {\n    static getPlaylistById(id: string) {\n        try {\n            return axiosInstance.get<GetPlaylistResponse>(`${baseURL}/${id}`)\n        } catch (error) {\n            console.error(`Failed to get playlist with id: \"${id}\". Error: ${error}`)\n        }\n    }\n}","import PlaylistEndpoints from \"../Endpoints/Playlists\"\nimport { PlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\n\nexport default class PlaylistService {\n    static async getPlaylist(id: string): Promise<PlaylistObject | undefined> {\n        const response = await PlaylistEndpoints.getPlaylistById(id)\n        if (!response) {\n            return\n        }\n\n        const tracks = response.data.tracks.items\n        return {\n            ...response.data,\n            tracks\n        }\n    }\n}","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nexport default function Navbar() {\n    const pageURL = \"/spotify-playlist-plus\"\n    return (\n        <div>     \n            <Link to={pageURL}>Home </Link>\n            <Link to={pageURL+\"/AlbumPage\"}>Album Page </Link>\n            <Link to={pageURL + \"/artist/4V8LLVI7PbaPR0K2TGSxFF\"}>Artist Page</Link>\n            <Link to={pageURL + \"/playlist/37i9dQZF1DZ06evO2QRN3G\"}>Playlist Page </Link>\n        </div>      \n    )\n}","/**\n * Convert a length of time in ms to a sentence\n * Ex: 1 Day, 3 Hours, 12 Minutes\n */\nexport function msToSentence(ms: number) {\n    if (ms <= 0) {\n        return undefined\n    }\n\n    const msInDay = 86400000\n    const msInHour = msInDay / 24\n    const msInMinute = msInHour / 60\n\n    const labelParts: string[] = []\n    const pluralize = (count: number) => count > 1 ? \"s\" : \"\"\n    const days = Math.floor(ms / msInDay)\n    if (days > 0) {\n        labelParts.push(`${days} Day${pluralize(days)}`)\n    }\n\n    let remainder = ms % msInDay\n    const hours = Math.floor(remainder / msInHour)\n    if (hours > 0) {\n        labelParts.push(`${hours % 24} Hour${pluralize(hours)}`)\n    }\n    \n    remainder = remainder % msInHour\n    const minutes = Math.floor(remainder / msInMinute)\n    if (minutes > 0) {\n        labelParts.push(`${minutes % 60} Minute${pluralize(minutes)}`)\n    }\n\n    remainder = remainder % msInMinute\n    const seconds = Math.floor(remainder / 1000)\n    if (labelParts.length == 0 && seconds > 0) {\n        labelParts.push(`${seconds} Second${pluralize(seconds)}`)\n    }\n\n    return labelParts.join(\", \")\n}\n\nexport function msToTimestamp(ms: number) {\n    if (ms <= 0) {\n        return undefined\n    }\n\n    const seconds = Math.floor(ms / 1000)\n    const minutes = Math.floor(seconds / 60)\n    const hours = Math.floor(minutes / 60)\n\n    const labelValues: number[] = []\n    if (hours > 0) {\n        labelValues.push(hours)\n    }\n\n    if (minutes > 0 || (hours < 1)) {\n        labelValues.push(minutes % 60)\n    }\n\n    if (seconds > 0) {\n        labelValues.push(seconds % 60)\n    }\n\n    return labelValues.map((value, index) => {\n        if (index == 0) {\n            // Short circuit for the first element because we don't want\n            // To prefix the first item in the label with a 0\n            return `${value}`\n        }\n\n        if (value < 10) {\n            return `0${value}`\n        }\n\n        return `${value}`\n    }).join(\":\")\n}","/* eslint-disable */\nexport enum TrackSymbols {\n    Play = \"\\u25B6\",\n    Pause = \"\\u23F8\",\n    Next = \"\\u23E9\",\n    Previous = \"\\u23EA\"\n}\n/* eslint-enable */\n","import axiosInstance from \"./AxiosConfig\"\n\nconst basePlaybackURL = \"https://api.spotify.com/v1/me/player\"\n\nexport function getPlaybackInformation() {\n    axiosInstance.get(basePlaybackURL)\n}\n\nexport function startResume() {\n    axiosInstance.put(`${basePlaybackURL}/play`)\n}\n\nexport function pause() {\n    axiosInstance.put(`${basePlaybackURL}/pause`)\n}","import React from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { TrackSymbols } from \"../../Constants/Symbols\"\nimport * as PlayerEndpoints from \"../../Endpoints/Player\"\n\ninterface PlayerButtonProps {\n    currentlyPlaying: Boolean\n}\n\ninterface PlayerButtonState extends PlayerButtonProps {}\n\nexport default class PlayerButton extends React.Component<PlayerButtonProps, PlayerButtonState> {\n    constructor(props: PlayerButtonProps) {\n        super(props)\n\n        this.state = {\n            ...props,\n        }\n\n        this.playerButtonClicked = this.playerButtonClicked.bind(this)\n    }\n\n    playerButtonClicked() {\n        this.state.currentlyPlaying ? PlayerEndpoints.pause() : PlayerEndpoints.startResume()\n\n        this.setState({\n            currentlyPlaying: !this.state.currentlyPlaying,\n        })\n    }\n\n    // TODO: Change Unicode to .svg's or some other format that can be styled. Good for now tho\n    render() {\n        return (\n            <Button variant=\"outline-dark\" onClick={this.playerButtonClicked}>\n                {this.props.currentlyPlaying ? TrackSymbols.Pause : TrackSymbols.Play}\n            </Button>\n        )\n    }\n}\n","import React from \"react\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport { msToTimestamp } from \"../../../Services/Utility\"\nimport PlayerButton from \"../PlayerButton\"\n\ninterface TrackTableItemProps {\n    track: TrackObject\n}\n\ninterface TrackTableItemState extends TrackTableItemProps {}\n\nexport default class TrackTableItem extends React.Component<TrackTableItemProps, TrackTableItemState> {\n    constructor(props: TrackTableItemProps) {\n        super(props)\n        this.state = { track: props.track }\n    }\n\n    render() {\n        const artistNames = this.state.track.artists.map((artist) => artist.name).join(\", \")\n        return (\n            <tr>\n                <td>\n                    <PlayerButton currentlyPlaying={false}></PlayerButton>\n                </td>\n                <td>{this.state.track.track_number}</td>\n                <td>{this.state.track.name}</td>\n                <td>{artistNames}</td>\n                <td>{this.state.track.album?.name ?? \"No album\"}</td>\n                <td>{msToTimestamp(this.state.track.duration_ms)}</td>\n            </tr>\n        )\n    }\n}\n","import React from \"react\"\nimport { Table } from \"react-bootstrap\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport TrackTableItem from \"./TrackTableItem\"\n\ninterface TrackTableProps {\n    tracks?: TrackObject[]\n}\n\ninterface TrackTableState extends TrackTableProps {}\n\nexport default class TrackTable extends React.Component<TrackTableProps, TrackTableState> {\n    constructor(props: TrackTableProps) {\n        super(props)\n        this.state = { tracks: props.tracks }\n    }\n\n    render() {\n        if (!this.state.tracks) {\n            return <p>Loading tracks</p>\n        }\n\n        return (\n            <Table hover>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Title</th>\n                        <th>Artist(s)</th>\n                        <th>Album</th>\n                        <th>Duration</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.tracks.map((track) => (<TrackTableItem key={track.id} track={track}/>))}\n                </tbody>\n            </Table>\n        )\n    }\n}","import React from \"react\"\nimport { Col, Image, Row } from \"react-bootstrap\"\nimport { PlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\nimport { msToSentence } from \"../../../Services/Utility\"\n\ninterface PlaylistHeaderProps {\n    playlist?: PlaylistObject\n}\n\ninterface PlaylistHeaderState extends PlaylistHeaderProps { }\n\nexport default class PlaylistHeader extends React.Component<PlaylistHeaderProps, PlaylistHeaderState> {\n    constructor(props: PlaylistHeaderProps) {\n        super(props)\n        this.state = {\n            ...props\n        }\n    }\n\n    render() {\n        if (!this.state.playlist) {\n            return (\n                <p>Loading</p>\n            )\n        }\n\n        const { name, description, owner, tracks } = this.state.playlist\n\n        let playlistLength = 0\n        tracks.forEach(({ track }) => playlistLength += track.duration_ms)\n\n        return (\n            <Row style={{ marginBottom: 15 }}>\n                {/* Header */}\n                <Col xs=\"auto\">\n                    {/* Image size can be up to 640 by 640 */}\n                    <Image src={this.state.playlist.images[0].url} width={250} height={250} style={{ border: \"1px solid black\" }} />\n                </Col>\n                <Col>\n                    <h2>{name}</h2>\n                    <p>{description}</p>\n                    <p>Owned by: {owner.display_name}</p>\n                    <p>{tracks.length} Songs. {msToSentence(playlistLength)}</p>\n                </Col>\n            </Row>\n        )\n    }\n}","import React from \"react\"\n\nexport default class PlaylistZeroState extends React.Component {\n    render() {\n        return (\n            <h3>No songs in this playlist</h3>\n        )\n    }\n}","import React from \"react\"\nimport { Container } from \"react-bootstrap\"\nimport { match } from \"react-router-dom\"\nimport PlaylistService from \"../../../Services/PlaylistService\"\nimport { PlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\nimport Navbar from \"../../Shared/Navbar\"\nimport TrackTable from \"../../Shared/TrackList/TrackTable\"\nimport PlaylistHeader from \"./PlaylistHeader\"\nimport PlaylistZeroState from \"./PlaylistZeroState\"\n\ninterface PlaylistPageProps {\n    match: match<{id: string}>\n}\n\ninterface PlaylistPageState {\n    playlistId: string,\n    playlist?: PlaylistObject\n}\n\nexport default class PlaylistPage extends React.Component<PlaylistPageProps, PlaylistPageState> {\n    constructor(props: PlaylistPageProps) {\n        super(props)\n        this.state = {\n            playlistId: props.match.params.id\n        }\n\n        this.loadPlaylist = this.loadPlaylist.bind(this)\n        this.loadPlaylist()\n    }\n\n    loadPlaylist() {\n        console.log(\"Loading playlist\")\n        PlaylistService.getPlaylist(this.state.playlistId).then((playlist) => {\n            if (playlist) {\n                this.setState({ ...this.state, playlist })\n            } else {\n                // Error happened, check console. In future, display error to user?\n            }\n        })\n    }\n\n    render() {\n        if (!this.state.playlist) {\n            return (<PlaylistZeroState/>)\n        }\n        \n        // Extract the TrackObjects from the PlaylistTrackObjects\n        const tracks = this.state.playlist.tracks.map(({ track }) => track)\n\n        return (\n            <Container fluid>\n                <Navbar/>\n                <PlaylistHeader playlist={this.state.playlist}/>\n                <TrackTable tracks={tracks} />\n            </Container>\n        )\n    }\n}","import React from \"react\"\n// import { Container } from \"react-bootstrap\"\n// import { AlbumObject, AlbumType } from \"../../../Models/SpotifyObjects/AlbumObjects\"\n// import { Track } from \"../../../Models/Tracks\"\n// import PlaylistHeader from \"../Playlist/PlaylistHeader\"\n// import AlbumZeroState from \"./AlbumZeroState\"\nimport Navbar from \"../../Shared/Navbar\"\nexport default class AlbumPage extends React.Component {\n    \n\n    render() {\n        // const { name, tracks } = this.state.album\n        // const mockTrack: Track = {\n        //     track_number: 1,\n        //     added_at: \"2/10/2021\",\n        //     artists: [],\n        //     duration_ms: 1000,\n        //     explicit: false,\n        //     href: \"link\",\n        //     id: Math.random().toString(),\n        //     is_playable: true,\n        //     name: \"My Song\",\n        //     popularity: 100\n        // }\n\n        // const mockAlbum: AlbumObject = {\n        //     album_type: AlbumType.Album,\n        //     artists: [],\n        //     genres: [\"genre\"],\n        //     href: \"href\",\n        //     id: Math.random().toString(),\n        //     images: [],\n        //     label: \"label\",\n        //     name: \"My Album Name\",\n        //     popularity: 100,\n        //     tracks:[],\n        //     release_date: \"2021\"\n\n        // }\n        \n\n        return (\n            <div>\n                <Navbar></Navbar>  \n                <h1>Name</h1>\n                <img src=\"https://images-na.ssl-images-amazon.com/images/I/6123EInXGSL._SL1081_.jpg\" height=\"300px\" width=\"300px\"></img>\n            </div>  \n        )\n    }\n}","import React from \"react\"\n\nexport interface AuthToken {\n    access_token: string\n    token_type: string\n    expires_in: number\n    refresh_token: string\n}\n\nexport interface TokenRetriever {\n    verifier: string,\n    redirect_url: string\n}\n\nexport interface AuthenticationContextObject {\n    authToken?: AuthToken,\n    tokenRetriever?: TokenRetriever,\n    logOut: () => void\n}\n\nexport const AuthenticationContext = React.createContext<AuthenticationContextObject | undefined>(undefined)\n","import React, { ReactNode } from \"react\"\nimport { AuthenticationContext } from \"../../Models/Authentication\"\n\nexport default function LandingPage() {\n    return (\n        <div>\n            <h2>Spotify Playlist Plus</h2>\n            {logInButton()}\n        </div>\n    )\n}\n// To view Spotify login API steps head to: https://developer.spotify.com/documentation/general/guides/authorization-guide/\n// We're using the Auth code with PKCE flow\nfunction logInButton(): ReactNode {\n    return (\n        <AuthenticationContext.Consumer>\n            {(context) => {\n                let href = undefined\n                if (context && context.tokenRetriever) {\n                    href = context.tokenRetriever.redirect_url\n                }\n\n                return (\n                    <a href={href}>\n                        <button disabled={!href}>Spotify Login</button>\n                    </a>\n                )\n            }}\n        </AuthenticationContext.Consumer>\n    )\n}\n","import { ArtistObject } from \"../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/artists\"\n\nexport default class ArtistEndpoints {\n    static getArtistById(id: string) {\n        try {\n            return axiosInstance.get<ArtistObject>(`${baseURL}/${id}`)\n        } catch (error) {\n            console.error(`Failed to get artist with id: \"${id}\". Error: ${error}`)\n        }\n    }\n\n    static getArtistTopTracks(id: string) {\n        try {\n            // Hardcoding US market here because this is for a school project and I don't anticipate non-us spotify users using this\n            return axiosInstance.get<{ tracks: TrackObject[] }>(`${baseURL}/${id}/top-tracks?market=US`)\n        } catch (error) {\n            console.error(`Failed to get top tracks for artist with id: \"${id}. Error: ${error}`)\n        }\n    }\n}","import ArtistEndpoints from \"../Endpoints/Artists\"\nimport { ArtistObject } from \"../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\n\nexport default class ArtistService {\n    static async getArtist(id: string): Promise<ArtistObject | undefined> {\n        const response = await ArtistEndpoints.getArtistById(id)\n        if (!response) {\n            return\n        }\n\n        return response.data\n    }\n\n    static async getArtistTopTracks({ id }: ArtistObject): Promise<TrackObject[] | undefined> {\n        const response = await ArtistEndpoints.getArtistTopTracks(id)\n        if (!response) {\n            return\n        }\n\n        return response.data.tracks\n    }\n}","import React from \"react\"\nimport { Badge, Col, Image, Row } from \"react-bootstrap\"\nimport { Container } from \"react-bootstrap\"\nimport { match } from \"react-router-dom\"\nimport { ArtistObject } from \"../../../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport ArtistService from \"../../../Services/ArtistService\"\nimport Navbar from \"../../Shared/Navbar\"\nimport TrackTable from \"../../Shared/TrackList/TrackTable\"\n\ninterface ArtistPageProps {\n    match: match<{ id: string }>\n}\n\ninterface ArtistPageState {\n    artist?: ArtistObject,\n    topTracks?: TrackObject[],\n    artistId: string\n}\n\nexport default class ArtistPage extends React.Component<ArtistPageProps, ArtistPageState> {\n    constructor(props: ArtistPageProps) {\n        super(props)\n        this.state = {\n            artistId: props.match.params.id\n        }\n\n        this.loadArtist = this.loadArtist.bind(this)\n        this.loadTopTracks = this.loadTopTracks.bind(this)\n        this.loadArtist()\n    }\n\n    loadArtist() {\n        ArtistService.getArtist(this.state.artistId).then((artist) => {\n            if (artist) {\n                this.setState({ ...this.state, artist })\n                this.loadTopTracks(artist)\n            } else {\n                // Error happened, check console. In future, display error to user?\n            }\n        }).catch(error => console.error(error))\n    }\n\n    loadTopTracks(artist: ArtistObject) {\n        ArtistService.getArtistTopTracks(artist).then((topTracks) => {\n            if (topTracks) {\n                this.setState({ ...this.state, topTracks })\n            }\n        })\n    }\n\n    render() {\n        if (!this.state.artist) {\n            return (\n                <React.Fragment>\n                    <Navbar/>\n                    <p>Loading Artist</p>\n                </React.Fragment>\n            )\n        }\n\n        const { genres, images, name, popularity } = this.state.artist\n        const coverImages = {\n            sm: images.find(image => image.height === 160),\n            md: images.find(image => image.height === 320),\n            lg: images.find(image => image.height === 640),\n        }\n\n        const coverImage = coverImages.md ?? coverImages.lg ?? coverImages.sm\n        const genreBadges = genres.map((genre) => (\n            <Badge key={genre} style={{marginRight: 5}} variant=\"secondary\">{genre}</Badge>\n        ))\n\n        return (\n            <Container fluid>\n                <Navbar />\n                {coverImage ?\n                    <Image src={coverImage.url} />\n                    : <p>Loading Image</p>\n                }\n                <Row>\n                    <Col as={\"h2\"}>{name}</Col>\n                </Row>\n                <Row>\n                    <Col as={\"p\"}>Genres: {genreBadges}</Col>\n                </Row>\n                <Row>\n                    <Col as={\"p\"}> Popularity: {popularity}th Percentile </Col>\n                </Row>\n                <Row>\n                    <Col as={\"h3\"}>Top Tracks</Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <TrackTable tracks={this.state.topTracks} />\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n","import React from \"react\"\nimport { AuthenticationContext } from \"../../../Models/Authentication\"\nimport Navbar from \"../../Shared/Navbar\"\n\nexport default class HomePage extends React.Component {\n    static contextType = AuthenticationContext\n\n    render() {\n        return (\n            <React.Fragment>\n                <p>Home page</p>\n                <Navbar/>\n                <button onClick={this.context.logOut}>Log out</button>\n            </React.Fragment>\n        )\n    }\n}","export const authEndpoint = \"https://accounts.spotify.com/authorize\"\n\nexport const clientId = \"a7d9f2be243d45f69ad9e83e2ef03b61\"\n\nconst prod = {\n    redirectUri: \"https://jacobhearst.github.io/spotify-playlist-plus\"\n}\n\nconst dev = {\n    redirectUri: \"http://localhost:3000/spotify-playlist-plus\"\n}\n\n// export const scopes = [\n//     \"user-top-read\",\n//     \"user-read-currently-playing\",\n//     \"user-read-playback-state\",\n// ]\n\nexport const config = process.env.NODE_ENV == \"development\" ? dev : prod","import { AuthToken } from \"../Models/Authentication\"\nimport axios from \"axios\"\nimport { RefreshTokenRequest, GetTokenRequest } from \"../Models/Requests/AuthenticationRequests\"\n\nexport async function getAuthenticationToken(data: RefreshTokenRequest | GetTokenRequest): Promise<AuthToken | undefined> {\n    const response = await axios.post(\"https://accounts.spotify.com/api/token\", null, {\n        params: data,\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n    })\n\n    return response.data\n}","import { authEndpoint, clientId, config } from \"../Constants/Constants\"\nimport { getAuthenticationToken } from \"../Endpoints/Authorization\"\nimport { AuthToken } from \"../Models/Authentication\"\nimport { GetTokenRequest } from \"../Models/Requests/AuthenticationRequests\"\n\n\n// class that handles all authentication\nexport default class AuthService {\n    // scopes that are needed \n    static scopes : string[] = [\"user-modify-playback-state\", \"user-read-playback-state\"]\n    constructor() {}\n\n    // ########################## Cookie Creation / Retrival ###############################\n    static createCodeVerifierCookie(): string {\n        const verifier = this.randomString()\n        document.cookie = `code_verifier=${verifier}`\n\n        return verifier\n    }\n\n    static getVerifierCookie(): string | undefined {\n        // document.cookie is a 'string' representation of the cookies, seperated by '; '\n        const cookies = document.cookie.split(\"; \") // # yum\n    \n        // find the cookie that starts with code_verifier\n        const verifier = cookies.filter((cookie) => cookie.startsWith(\"code_verifier\"))\n    \n        // if it exists, return it\n        return verifier.length > 0 ? verifier[0].split(\"=\")[1] : undefined\n    }\n    // ####################################################################################\n\n\n    // ############## Verifier / Authorization URL Creation ##############################\n    static async constructAuthorizationURI(verifier: string): Promise<string> {\n        const scopeString : string = this.scopes.join(\" \")\n\n        let url = `${authEndpoint}?client_id=${clientId}&response_type=code&redirect_uri=${config.redirectUri}&scope=${encodeURIComponent(scopeString)}`\n\n        const hash = await this.sha256(verifier)\n        const code_challenge = this.base64urlencode(hash)\n\n        url += `&code_challenge_method=S256&code_challenge=${code_challenge}`\n\n        return url\n    }  \n\n    static randomString() : string {\n        let randomString : string = \"\"\n\n        // has to be between 43 - 128 according to spotify\n        const minCharacters = 43\n\n        // initalize array of length 43 and generate random values\n        const randomNumbers = new Uint8Array(minCharacters)\n        window.crypto.getRandomValues(randomNumbers)\n\n        // possible characters [A-Z], [a-z], [0-9]\n        // could also include certain characters if we wanted to make it even more secure \n        const possibleCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n\n        // going to need to convert bytes to value between 0 - possibleCharcters.length\n        const byteLength = 256\n        const offset = byteLength / possibleCharacters.length\n\n        for (var i = 0; i < minCharacters; i++) {\n            randomString += possibleCharacters[Math.floor(Math.abs(randomNumbers[i]) / offset)]\n        }\n\n        return randomString\n    }\n\n    static sha256(verifier: string) {\n        const encoder = new TextEncoder()\n        const data = encoder.encode(verifier)\n    \n        return window.crypto.subtle.digest(\"SHA-256\", data)\n    }\n\n    static base64urlencode(hash: ArrayBuffer) {\n        const values : Uint8Array = new Uint8Array(hash)\n\n        // return encoded string\n        // replace '+' with '-', '/' with '_', and remove '=' at end for url safety\n        return btoa(String.fromCharCode.apply(null, values as unknown as number[]))\n            .replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\")\n    }\n\n    // ###############################################################################################\n\n\n    // ########################### Token Retrievers ##################################################\n\n    /* eslint-disable */\n    // Disable esline or else typescript will complain about the callback signature\n    static async refreshTimer(token: AuthToken, callback: (newToken: AuthToken) => any) {\n        // refresh 5 seconds before the token expires\n        const msBeforeExpires = 5000\n        const expireTimeInMs = token.expires_in * 1000\n        const refreshTime = expireTimeInMs - msBeforeExpires\n\n        setTimeout(async () => {\n            const newToken: AuthToken | undefined = await getAuthenticationToken({\n                grant_type: \"refresh_token\",\n                refresh_token: token.refresh_token,\n                client_id: clientId\n            })\n\n            if (newToken) {\n                callback(newToken)\n            }\n\n        }, refreshTime)\n    }\n    /* eslint-enable */\n\n    static exchangeCodeForToken(code: string, verifier: string) {      \n        const data : GetTokenRequest = {\n            client_id: clientId,\n            grant_type: \"authorization_code\",\n            code: code,\n            redirect_uri: config.redirectUri,\n            code_verifier: verifier\n        } \n\n        return getAuthenticationToken(data)\n    } \n\n    // ###############################################################################################\n}\n","import React from \"react\"\nimport { Route, Switch } from \"react-router-dom\"\nimport \"./App.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport PlaylistPage from \"./Components/Pages/Playlist/PlaylistPage\"\nimport AlbumPage from \"./Components/Pages/Album/AlbumPage\"\nimport LandingPage from \"./Components/Shared/LandingPage\"\nimport ArtistPage from \"./Components/Pages/Artist/ArtistPage\"\nimport { AuthenticationContext, AuthenticationContextObject, TokenRetriever, AuthToken } from \"./Models/Authentication\"\nimport HomePage from \"./Components/Pages/Home/HomePage\"\nimport { initAxios } from \"./Endpoints/AxiosConfig\"\nimport AuthService from \"./Services/AuthService\"\n\nexport default class App extends React.Component<{}, AuthenticationContextObject> {\n    constructor(props: {}) {\n        super(props)\n\n        // get cookie or create a new one\n        const verifier = AuthService.getVerifierCookie() ?? AuthService.createCodeVerifierCookie()\n\n        // try and get authorization code from url\n        const code = new URLSearchParams(window.location.search).get(\"code\")\n\n        // havn't redirected yet/ need to do first step of authorization\n        if (!code) {\n            // force reload component when we actually get the redirect url for the log in button\n            AuthService.constructAuthorizationURI(verifier).then((url) => {\n                const tokenRetriever: TokenRetriever = {\n                    redirect_url: url,\n                    verifier: verifier,\n                }\n\n                this.setState({ ...this.state, tokenRetriever })\n            })\n        } else {\n            AuthService.exchangeCodeForToken(code, verifier).then((authToken) => {\n                if (authToken) {\n                    this.refreshTokenCallback(authToken)\n                    initAxios(this.state)\n                }\n            })\n        }\n\n        this.state = {\n            logOut: () => {\n                this.setState({ ...this.state, authToken: undefined })\n            },\n        }\n    }\n\n    render() {\n        const pageURL = \"/spotify-playlist-plus\"\n\n        let landingElement = <LandingPage />\n        if (this.state.authToken) {\n            landingElement = <HomePage />\n        }\n\n        return (\n            <main>\n                <AuthenticationContext.Provider value={this.state}>\n                    <Switch>\n                        <Route exact path={pageURL}>\n                            {landingElement}\n                        </Route>\n                        <Route exact path={pageURL + \"/AlbumPage\"} component={AlbumPage} />\n                        <Route exact path={pageURL + \"/artist/:id\"} component={ArtistPage} />\n                        <Route exact path={pageURL + \"/playlist/:id\"} component={PlaylistPage} />\n                    </Switch>\n                </AuthenticationContext.Provider>\n            </main>\n        )\n    }\n\n    refreshTokenCallback(token: AuthToken) {\n        this.setState({ ...this.state, authToken: token })\n        AuthService.refreshTimer(token, this.refreshTokenCallback)\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}