{"version":3,"sources":["Endpoints/AxiosConfig.ts","Endpoints/Playlists.ts","Services/PlaylistService.ts","Components/Shared/Navbar.tsx","Services/Utility.ts","Constants/Symbols.ts","Endpoints/Player.ts","Components/Shared/PlayerButton.tsx","Components/Shared/TrackList/TrackTableItem.tsx","Components/Shared/TrackList/TrackTable.tsx","Components/Pages/Playlist/PlaylistHeader.tsx","Components/Pages/Playlist/PlaylistZeroState.tsx","Components/Pages/Playlist/PlaylistPage.tsx","Components/Pages/Album/AlbumPage.tsx","Models/Authentication.ts","Components/Pages/Home/HomePage.tsx","App.tsx","Components/Shared/LandingPage.tsx","reportWebVitals.js","index.tsx"],"names":["axiosInstance","axios","create","interceptors","response","use","error","console","log","Promise","reject","PlaylistService","id","get","a","getPlaylistById","tracks","data","items","Navbar","pageURL","to","msToSentence","ms","seconds","Math","floor","minutes","hours","days","label","push","length","join","msToTimestamp","labelValues","map","value","index","TrackSymbols","basePlaybackURL","PlayerButton","props","state","this","currentlyPlaying","put","setState","Button","variant","onClick","playerButtonClicked","Pause","Play","React","Component","TrackTableItem","artistNames","track","artists","artist","name","album","duration_ms","TrackTable","Table","hover","PlaylistHeader","playlist","description","owner","playlistLength","reduce","previousValue","currentValue","Row","style","marginBottom","Col","xs","Image","src","images","url","width","height","border","display_name","PlaylistZeroState","PlaylistPage","playlistId","match","params","loadPlaylist","bind","getPlaylist","then","Container","fluid","AlbumPage","TokenWatcher","currentToken","token_type","expires_in","startWatching","AuthenticationContext","createContext","undefined","HomePage","Fragment","context","logOut","contextType","App","authContext","tokenWatcher","getURLHashValues","window","location","hash","Number","defaults","headers","common","warn","urlHash","values","slice","split","param","every","val","landingElement","href","authEndpoint","Provider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c15a066.chunk.js","sourcesContent":["import axios from \"axios\"\nimport { AuthenticationContextObject } from \"../Models/Authentication\"\n\nconst axiosInstance = axios.create({})\n\n// set authorization header so that we don't have to specify it with every request\nexport function initAxios(context: AuthenticationContextObject) {\n    if (!context.tokenWatcher) {\n        console.warn(\"Can't initialize axios without a token watcher\")\n        return\n    }\n\n    axiosInstance.defaults.headers.common[\"Authorization\"] = \"Bearer \" + context.tokenWatcher.currentToken\n}\n\n// default error handling for responses\naxiosInstance.interceptors.response.use((response) => {return response}, (error) => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\nexport default axiosInstance\n","import { GetPlaylistResponse } from \"../Models/Responses/PlaylistResponses\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/playlists\"\n\nexport default class PlaylistService {\n    static getPlaylistById(id: string) {\n        try {\n            return axiosInstance.get<GetPlaylistResponse>(`${baseURL}/${id}`)\n        } catch (error) {\n            console.error(`Failed to get playlist with id: \"${id}\". Error: ${error}`)\n        }\n    }\n}","import PlaylistService from \"../Endpoints/Playlists\"\nimport { PlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\n\nexport async function getPlaylist(id: string): Promise<PlaylistObject | undefined> {\n    const response = await PlaylistService.getPlaylistById(id)\n    if (!response) {\n        return\n    }\n\n    const tracks = response.data.tracks.items\n    return {\n        ...response.data,\n        tracks\n    }\n}","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nexport default function Navbar() {\n    const pageURL = \"/spotify-playlist-plus\"\n    return (\n        <div>     \n            <Link to={pageURL}>Home </Link>\n            <Link to={pageURL+\"/AlbumPage\"}>Album Page </Link>\n            <Link to={pageURL + \"/playlist/37i9dQZF1DZ06evO2QRN3G\"}>Playlist Page </Link>\n        </div>      \n    )\n}","/**\n * Convert a length of time in ms to a sentence\n * Ex: 1 Day, 3 Hours, 12 Minutes\n */ \nexport function msToSentence(ms: number) {\n    const seconds = Math.floor(ms / 1000)\n    const minutes = Math.floor(seconds / 60)\n    const hours = Math.floor(minutes / 60)\n    const days = Math.floor(hours / 24)\n\n    const label: string[] = []\n    if (days > 0) {\n        label.push(`${days} Days`)\n    }\n\n    if (hours > 0) {\n        label.push(`${hours % 24} Hours`)\n    }\n\n    if (minutes > 0) {\n        label.push(`${minutes % 60} Minutes`)\n    }\n\n    if (label.length == 0) {\n        label.push(`${seconds} Seconds`)\n    }\n\n    return label.join(\", \")\n}\n\nexport function msToTimestamp(ms: number) {\n    const seconds = Math.floor(ms / 1000)\n    const minutes = Math.floor(seconds / 60)\n    const hours = Math.floor(minutes / 60)\n\n    const labelValues: number[] = []\n    if (hours > 0) {\n        labelValues.push(hours)\n    }\n\n    if (minutes > 0) {\n        labelValues.push(minutes % 60)\n    }\n\n    if (seconds > 0) {\n        labelValues.push(seconds % 60)\n    }\n\n    return labelValues.map((value, index) => {\n        if (value % 10 == 0) {\n            return `${value}0`\n        }\n\n        if (index == 0) {\n            return `${value}`\n        }\n\n        if (value < 10) {\n            return `0${value}`\n        }\n\n        return `${value}`\n    }).join(\":\")\n}","export enum TrackSymbols {\n    Play = \"#9654\",\n    Pause = \"#9208\",\n    Next = \"#5861\",\n    Previous = \"#5862\"\n}\n","import axiosInstance from \"./AxiosConfig\"\n\nconst basePlaybackURL = \"https://api.spotify.com/v1/me/player\"\n\nexport function getPlaybackInformation() {\n    axiosInstance.get(basePlaybackURL)\n        .then((response) => {\n            return response\n        })\n}\n\nexport function startResume() {\n    axiosInstance.put(`${basePlaybackURL}/play`)\n}\n\nexport function pause() {\n    axiosInstance.put(`${basePlaybackURL}/pause`)\n}","import React from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { TrackSymbols } from \"../../Constants/Symbols\"\nimport * as PlayerEndpoints from \"../../Endpoints/Player\"\n\ninterface PlayerButtonProps {\n    currentlyPlaying: Boolean\n}\n\ninterface PlayerButtonState extends PlayerButtonProps {}\n\nexport default class PlayerButton extends React.Component<PlayerButtonProps, PlayerButtonState> {\n    constructor(props: PlayerButtonProps) {\n        super(props)\n\n        this.state = {\n            ...props,\n        }\n    }\n\n    playerButtonClicked() {\n        this.state.currentlyPlaying ? PlayerEndpoints.pause() : PlayerEndpoints.startResume()\n\n        this.setState({\n            currentlyPlaying: !this.state.currentlyPlaying,\n        })\n    }\n\n    render() {\n        return (\n            <Button variant=\"outline-dark\" onClick={this.playerButtonClicked}>\n                &{this.props.currentlyPlaying ? TrackSymbols.Pause : TrackSymbols.Play}\n            </Button>\n        )\n    }\n}\n","import React from \"react\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport { msToTimestamp } from \"../../../Services/Utility\"\nimport PlayerButton from \"../PlayerButton\"\n\ninterface TrackTableItemProps {\n    track: TrackObject\n}\n\ninterface TrackTableItemState extends TrackTableItemProps {}\n\nexport default class TrackTableItem extends React.Component<TrackTableItemProps, TrackTableItemState> {\n    constructor(props: TrackTableItemProps) {\n        super(props)\n        this.state = { ...props }\n    }\n\n    render() {\n        const artistNames = this.state.track.artists.map(artist => artist.name).join(\", \")\n        return (\n            <tr>\n                <td><PlayerButton currentlyPlaying={false}>&#21E8</PlayerButton></td>\n                <td>{this.state.track.name}</td>\n                <td>{artistNames}</td>\n                <td>{this.state.track.album?.name ?? \"No album\"}</td>\n                <td>{msToTimestamp(this.state.track.duration_ms)}</td>\n            </tr>\n        )\n    }\n}\n","import React from \"react\"\nimport { Table } from \"react-bootstrap\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport TrackTableItem from \"./TrackTableItem\"\n\ninterface TrackTableProps {\n    tracks?: TrackObject[]\n}\n\ninterface TrackTableState extends TrackTableProps {}\n\nexport default class TrackTable extends React.Component<TrackTableProps, TrackTableState> {\n    constructor(props: TrackTableProps) {\n        super(props)\n        this.state = { ...props }\n    }\n\n    render() {\n        return (\n            <Table hover>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Title</th>\n                        <th>Artist(s)</th>\n                        <th>Album</th>\n                        <th>Duration</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { this.state.tracks\n                        ? this.state.tracks.map((track) => (<TrackTableItem key={track.id} track={track}/>))\n                        : <tr>Loading tracks</tr>}\n                </tbody>\n            </Table>\n        )\n    }\n}","import React from \"react\"\nimport { Col, Image, Row } from \"react-bootstrap\"\nimport { PlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\nimport { msToSentence } from \"../../../Services/Utility\"\n\ninterface PlaylistHeaderProps {\n    playlist?: PlaylistObject\n}\n\ninterface PlaylistHeaderState extends PlaylistHeaderProps { }\n\nexport default class PlaylistHeader extends React.Component<PlaylistHeaderProps, PlaylistHeaderState> {\n    constructor(props: PlaylistHeaderProps) {\n        super(props)\n        this.state = {\n            ...props\n        }\n    }\n\n    render() {\n        if (!this.state.playlist) {\n            return (\n                <p>Loading</p>\n            )\n        }\n\n        const { name, description, owner, tracks } = this.state.playlist\n        const playlistLength = tracks\n            .map(({ track }) => track.duration_ms)\n            .reduce((previousValue, currentValue) => previousValue + currentValue)\n        return (\n            <Row style={{ marginBottom: 15 }}>\n                {/* Header */}\n                <Col xs=\"auto\">\n                    {/* Image size can be up to 640 by 640 */}\n                    <Image src={this.state.playlist.images[0].url} width={250} height={250} style={{ border: \"1px solid black\" }} />\n                </Col>\n                <Col>\n                    <h2>{name}</h2>\n                    <p>{description}</p>\n                    <p>Owned by: {owner.display_name}</p>\n                    <p>{tracks.length} Songs. {msToSentence(playlistLength)}</p>\n                </Col>\n            </Row>\n        )\n    }\n}","import React from \"react\"\n\nexport default class PlaylistZeroState extends React.Component {\n    render() {\n        return (\n            <h3>No songs in this playlist</h3>\n        )\n    }\n}","import React from \"react\"\nimport { Container } from \"react-bootstrap\"\nimport { match } from \"react-router-dom\"\nimport { getPlaylist } from \"../../../Services/PlaylistService\"\nimport { PlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\nimport Navbar from \"../../Shared/Navbar\"\nimport TrackTable from \"../../Shared/TrackList/TrackTable\"\nimport PlaylistHeader from \"./PlaylistHeader\"\nimport PlaylistZeroState from \"./PlaylistZeroState\"\n\ninterface PlaylistPageProps {\n    match: match<{id: string}>\n}\n\ninterface PlaylistPageState {\n    playlistId: string,\n    playlist?: PlaylistObject\n}\n\nexport default class PlaylistPage extends React.Component<PlaylistPageProps, PlaylistPageState> {\n    constructor(props: PlaylistPageProps) {\n        super(props)\n        this.state = {\n            playlistId: props.match.params.id\n        }\n\n        this.loadPlaylist = this.loadPlaylist.bind(this)\n        this.loadPlaylist()\n    }\n\n    loadPlaylist() {\n        console.log(\"Loading playlist\")\n        getPlaylist(this.state.playlistId).then((playlist) => {\n            if (playlist) {\n                this.setState({ ...this.state, playlist })\n            } else {\n                // Error happened, check console. In future, display error to user?\n            }\n        })\n    }\n\n    render() {\n        if (!this.state.playlist) {\n            return (<PlaylistZeroState/>)\n        }\n        \n        // Extract the TrackObjects from the PlaylistTrackObjects\n        const tracks = this.state.playlist.tracks.map(({ track }) => track)\n\n        return (\n            <Container fluid>\n                <Navbar/>\n                <PlaylistHeader playlist={this.state.playlist}/>\n                <TrackTable tracks={tracks} />\n            </Container>\n        )\n    }\n}","import React from \"react\"\n// import { Container } from \"react-bootstrap\"\n// import { AlbumObject, AlbumType } from \"../../../Models/SpotifyObjects/AlbumObjects\"\n// import { Track } from \"../../../Models/Tracks\"\n// import PlaylistHeader from \"../Playlist/PlaylistHeader\"\n// import AlbumZeroState from \"./AlbumZeroState\"\nimport Navbar from \"../../Shared/Navbar\"\nexport default class AlbumPage extends React.Component {\n    \n\n    render() {\n        // const { name, tracks } = this.state.album\n        // const mockTrack: Track = {\n        //     track_number: 1,\n        //     added_at: \"2/10/2021\",\n        //     artists: [],\n        //     duration_ms: 1000,\n        //     explicit: false,\n        //     href: \"link\",\n        //     id: Math.random().toString(),\n        //     is_playable: true,\n        //     name: \"My Song\",\n        //     popularity: 100\n        // }\n\n        // const mockAlbum: AlbumObject = {\n        //     album_type: AlbumType.Album,\n        //     artists: [],\n        //     genres: [\"genre\"],\n        //     href: \"href\",\n        //     id: Math.random().toString(),\n        //     images: [],\n        //     label: \"label\",\n        //     name: \"My Album Name\",\n        //     popularity: 100,\n        //     tracks:[],\n        //     release_date: \"2021\"\n\n        // }\n        \n\n        return (\n            <div>\n                <Navbar></Navbar>  \n                <h1>Name</h1>\n                <img src=\"https://images-na.ssl-images-amazon.com/images/I/6123EInXGSL._SL1081_.jpg\" height=\"300px\" width=\"300px\"></img>\n            </div>  \n        )\n    }\n}","import React from \"react\"\n\nexport class TokenWatcher {\n    currentToken: string\n    token_type: string\n    expires_in: number\n\n    constructor(currentToken: string, token_type: string, expires_in: number) {\n        this.currentToken = currentToken\n        this.token_type = token_type\n        this.expires_in = expires_in\n        this.startWatching()\n    }\n\n    startWatching() {\n        console.log(\"Watching token\")\n    }\n}\n\nexport interface AuthenticationContextObject {\n    tokenWatcher?: TokenWatcher,\n    logOut: () => void\n}\n\nexport const AuthenticationContext = React.createContext<AuthenticationContextObject | undefined>(undefined)\n","import React from \"react\"\nimport { AuthenticationContext } from \"../../../Models/Authentication\"\nimport Navbar from \"../../Shared/Navbar\"\n\nexport default class HomePage extends React.Component {\n    static contextType = AuthenticationContext\n\n    render() {\n        return (\n            <React.Fragment>\n                <p>Home page</p>\n                <Navbar/>\n                <button onClick={this.context.logOut}>Log out</button>\n            </React.Fragment>\n        )\n    }\n}","import React from \"react\"\nimport { Route, Switch } from \"react-router-dom\"\nimport \"./App.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport PlaylistPage from \"./Components/Pages/Playlist/PlaylistPage\"\nimport AlbumPage from \"./Components/Pages/Album/AlbumPage\"\nimport LandingPage from \"./Components/Shared/LandingPage\"\nimport { TokenWatcher, AuthenticationContext, AuthenticationContextObject } from \"./Models/Authentication\"\nimport HomePage from \"./Components/Pages/Home/HomePage\"\nimport { initAxios } from \"./Endpoints/AxiosConfig\"\n\nexport default class App extends React.Component<{}, AuthenticationContextObject> {\n    constructor(props: {}) {\n        super(props)\n\n        const authContext: AuthenticationContextObject = {\n            logOut: () => { this.setState({...this.state, tokenWatcher: undefined }) }\n        }\n\n        const params = this.getURLHashValues(window.location.hash)\n\n        // True when we were redirected from Spotify\n        if (params && params.length > 0) {\n            authContext.tokenWatcher = new TokenWatcher(params[0], params[1], Number(params[2]))\n            initAxios(authContext)\n        }\n    \n        this.state = authContext\n    }\n\n    getURLHashValues(urlHash: string) {\n        const values = urlHash\n            .slice(1, urlHash.length) // Remove the \"#\" from the beginning of the hash\n            .split(\"&\") // Split it into components\n            .map(param => param.split(\"=\")[1]) // Grab just the values from the params\n        \n        // If the values arr isn't empty and isn't full of undefined values\n        if (values.length > 0 && values.every(val => !!val)) {\n            return values\n        }\n    }\n\n    render() {\n        const pageURL = \"/spotify-playlist-plus\"\n\n        let landingElement = LandingPage()\n        if (this.state.tokenWatcher) {\n            landingElement = <HomePage/>\n        }\n\n        return (\n            <main>\n                <AuthenticationContext.Provider value={this.state}>\n                    <Switch>\n                        <Route exact path={pageURL}>{ landingElement }</Route>\n                        <Route exact path={pageURL + \"/AlbumPage\"} component={AlbumPage} />\n                        <Route exact path={pageURL + \"/playlist/:id\"} component={PlaylistPage} />\n                    </Switch>\n                </AuthenticationContext.Provider>\n            </main>\n        )\n    }\n}\n","import React, { ReactNode } from \"react\"\nimport { authEndpoint, clientId, redirectUri } from \"../../Constants/Constants\"\n\nexport default function LandingPage() {\n    return (\n        <div>\n            <h2>Spotify Playlist Plus</h2>\n            {logInButton()}\n        </div>\n    )\n}\n// To view Spotify login API steps head to: https://developer.spotify.com/documentation/general/guides/authorization-guide/\n// We're using the Implicit Grant flow\nfunction logInButton(): ReactNode {\n    return (\n        <a href={authEndpoint + \"?client_id=\" + clientId + \"&response_type=token&redirect_uri=\" + redirectUri}>\n            <button>Spotify Login</button>\n        </a>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}