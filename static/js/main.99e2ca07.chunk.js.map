{"version":3,"sources":["Endpoints/AxiosConfig.ts","Endpoints/Playlists.ts","Services/PlaylistService.ts","Services/Utility.ts","Constants/Symbols.ts","Components/Shared/ArtistLinks.tsx","Endpoints/Player.ts","Models/Authentication.ts","Components/Shared/PlayerButton.tsx","Components/Shared/TrackList/TrackDropDown.tsx","Components/Shared/TrackList/TrackTableItem.tsx","Components/Shared/TrackList/TrackTable.tsx","Endpoints/Track.ts","Services/TrackService.ts","Components/Pages/Playlist/PlaylistHeader.tsx","Components/Pages/Playlist/PlaylistZeroState.tsx","Components/Pages/Playlist/PlaylistPage.tsx","Components/Pages/Album/AlbumPage.tsx","Components/Shared/LandingPage.tsx","Endpoints/Artists.ts","Services/ArtistService.ts","Components/Pages/Artist/ArtistPage.tsx","Endpoints/User.ts","Services/UserService.ts","Components/Pages/Home/HomePage.tsx","Constants/Constants.ts","Endpoints/Authorization.ts","Services/AuthService.ts","Services/PlayerService.ts","Components/Shared/PlaylistList.tsx","Components/Shared/Navbar.tsx","Endpoints/Search.ts","Components/Shared/SearchBar.tsx","Services/SearchService.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["axiosInstance","axios","create","url","a","get","interceptors","response","use","error","console","log","Promise","reject","PlaylistEndpoints","id","PlaylistService","getPlaylistById","then","tracks","data","items","catch","msToSentence","ms","msInDay","msInHour","labelParts","pluralize","count","days","Math","floor","push","remainder","hours","minutes","seconds","length","join","msToTimestamp","labelValues","map","value","index","TrackSymbols","ArtistLinks","this","props","artists","artist","array","to","name","React","Component","basePlaybackURL","PlayerEndpoints","device_id","uris","put","AuthenticationContext","createContext","undefined","PlayerButton","state","playerButtonClicked","bind","player","currentlyPlaying","pause","startResume","_options","updateCurrentlyPlayingCallback","Consumer","context","Button","variant","onClick","Pause","Play","TrackDropDown","Dropdown","Toggle","Menu","Item","href","track","uri","TrackTableItem","className","track_number","album","duration_ms","TrackTable","updateCurrentTrack","trackNumber","currentlyPlayingTrack","setState","Table","hover","TrackEndpoints","ids","TrackService","trackIds","slice","getAudioFeatures","audio_features","decreasing","audioFeatures","sorted","sort","b","energy","reverse","getTrackFromFeature","find","feature","filter","PlaylistHeader","playByIntensity","playlist","deviceId","intensitySort","description","owner","playlistLength","forEach","Row","style","marginBottom","Col","xs","Image","src","images","width","height","border","display_name","as","ButtonGroup","disabled","split","contextType","PlaylistZeroState","PlaylistPage","playlistId","match","params","onSearchSelect","loadPlaylist","prevProps","location","getPlaylist","newPlaylist","getRequest","Container","fluid","AlbumPage","LandingPage","tokenRetriever","redirect_url","baseURL","ArtistEndpoints","ArtistService","getArtistById","getArtistTopTracks","ArtistPage","artistId","loadArtist","loadTopTracks","getArtist","topTracks","body","genres","popularity","coverImages","sm","image","md","lg","coverImage","genreBadges","genre","Badge","marginRight","Fragment","UserEndpoints","limit","after","before","urlParams","UserService","getRecentTracks","getPlaylists","HomePage","recentTracks","trackCards","Card","Body","Title","Text","overflowX","clientId","config","redirectUri","getAuthenticationToken","post","headers","AuthService","verifier","randomString","document","cookie","startsWith","scopeString","scopes","encodeURIComponent","sha256","hash","code_challenge","base64urlencode","randomNumbers","Uint8Array","window","crypto","getRandomValues","possibleCharacters","offset","i","abs","TextEncoder","encode","subtle","digest","values","btoa","String","fromCharCode","apply","replace","token","callback","expireTimeInMs","expires_in","refreshTime","setTimeout","grant_type","refresh_token","client_id","newToken","code","redirect_uri","code_verifier","waitForSpotify","resolve","Spotify","onSpotifyWebPlaybackSDKReady","getSpotifyPlayer","Player","playerInit","getOAuthToken","access_token","volume","PlaylistList","playlists","ListGroup","Navbar","pageURL","size","SearchEndpoints","query","responseItems","concat","SearchBar","searchVal","showModal","types","search","e","key","typesToSearch","Object","keys","t","target","defaultValue","GetSearchResults","createQuery","searchResponseItems","searchItems","item","type","album_type","getType","InputGroup","DropdownButton","title","Divider","Form","Check","inline","checked","label","onChange","FormControl","placeholder","onKeyDown","Modal","show","onHide","Header","Footer","App","getVerifierCookie","createCodeVerifierCookie","URLSearchParams","exchangeCodeForToken","authToken","defaults","common","refreshTokenCallback","getAuthURL","logOut","constructAuthorizationURI","Provider","Switch","exact","path","component","connect","on","device","refreshTimer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"8UAGMA,EAAgBC,IAAMC,OAAO,I,4CAgB5B,WAA0BC,GAA1B,SAAAC,EAAA,sEACUJ,EAAcK,IAAIF,GAD5B,oF,sBANPH,EAAcM,aAAaC,SAASC,KAAI,SAACD,GAAc,OAAOA,KAAW,SAACE,GAEtE,OADAC,QAAQC,IAAIF,GACLG,QAAQC,OAAOJ,MAQXT,QCfMc,E,oGACjB,SAAuBC,GACnB,OAAOf,EAAcK,IAAd,UAJC,uCAID,YAAqDU,M,qCAGhE,WACI,OAAOf,EAAcK,IAAyC,+C,KCXjDW,E,uIACjB,WAAyBD,GAAzB,0FACWD,EAAkBG,gBAAgBF,GACpCG,MAAK,SAACX,GACH,IAAMY,EAASZ,EAASa,KAAKD,OAAOE,MACpC,OAAO,2BACAd,EAASa,MADhB,IAEID,cAGPG,OAAM,SAACb,GACJC,QAAQD,MAAR,2CAAkDM,EAAlD,qBAAiEN,QAV7E,2C,uECAG,SAASc,EAAaC,GACzB,KAAIA,GAAM,GAAV,CAIA,IAAMC,EAAU,MACVC,EAAWD,KAGXE,EAAuB,GACvBC,EAAY,SAACC,GAAD,OAAmBA,EAAQ,EAAI,IAAM,IACjDC,EAAOC,KAAKC,MAAMR,EAAKC,GACzBK,EAAO,GACPH,EAAWM,KAAX,UAAmBH,EAAnB,eAA8BF,EAAUE,KAG5C,IAAII,EAAYV,EAAKC,EACfU,EAAQJ,KAAKC,MAAME,EAAYR,GACjCS,EAAQ,GACRR,EAAWM,KAAX,UAAmBE,EAAQ,GAA3B,gBAAqCP,EAAUO,KAGnDD,GAAwBR,EACxB,IAAMU,EAAUL,KAAKC,MAAME,EAhBRR,KAiBfU,EAAU,GACVT,EAAWM,KAAX,UAAmBG,EAAU,GAA7B,kBAAyCR,EAAUQ,KAGvDF,GArBmBR,IAsBnB,IAAMW,EAAUN,KAAKC,MAAME,EAAY,KAKvC,OAJyB,GAArBP,EAAWW,QAAeD,EAAU,GACpCV,EAAWM,KAAX,UAAmBI,EAAnB,kBAAoCT,EAAUS,KAG3CV,EAAWY,KAAK,OAGpB,SAASC,EAAchB,GAC1B,KAAIA,GAAM,GAAV,CAIA,IAAMa,EAAUN,KAAKC,MAAMR,EAAK,KAC1BY,EAAUL,KAAKC,MAAMK,EAAU,IAC/BF,EAAQJ,KAAKC,MAAMI,EAAU,IAE7BK,EAAwB,GAa9B,OAZIN,EAAQ,GACRM,EAAYR,KAAKE,IAGjBC,EAAU,GAAMD,EAAQ,IACxBM,EAAYR,KAAKG,EAAU,IAG3BC,EAAU,GACVI,EAAYR,KAAKI,EAAU,IAGxBI,EAAYC,KAAI,SAACC,EAAOC,GAC3B,OAAa,GAATA,EAGM,GAAN,OAAUD,GAGVA,EAAQ,GACF,IAAN,OAAWA,GAGT,GAAN,OAAUA,MACXJ,KAAK,M,IC1EAM,E,OCOSC,E,4JACjB,WACI,OAAOC,KAAKC,MAAMC,QAAQP,KAAI,SAACQ,EAAaN,EAAeO,GACvD,OAAIP,GAASO,EAAMb,OAAS,EAGpB,cAAC,IAAD,CAAsBc,GAAE,kBAAaF,EAAOnC,IAA5C,SACKmC,EAAOG,MADDH,EAAOnC,IAOtB,iCACI,cAAC,IAAD,CAAMqC,GAAE,kBAAaF,EAAOnC,IAA5B,SAAmCmC,EAAOG,OAD9C,UAAWH,EAAOnC,W,GAbOuC,IAAMC,W,kBDPnCV,K,cAAAA,E,eAAAA,E,cAAAA,E,mBAAAA,M,KEIZ,IAAMW,EAAkB,uCAEHC,E,kJACjB,oGACoDzD,EAAcK,IAAImD,GADtE,cACUjD,EADV,yBAEWA,GAFX,2C,+EAKA,SAAmBmD,EAAmBC,GAClC,IAAMvC,EAA2B,CAC7BuC,KAAMA,GAGV3D,EAAc4D,IAAd,UAAqBJ,EAArB,2BAAuDE,GAAatC,K,mBAGxE,WACIpB,EAAc4D,IAAd,UAAqBJ,EAArB,e,KCAD,IAAMK,EAAwBP,IAAMQ,mBAAuDC,GCJ7EC,E,kDACjB,WAAYhB,GAA2B,IAAD,8BAClC,cAAMA,IAEDiB,MAAL,eACOjB,GAGP,EAAKkB,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAPO,E,8FAUtC,WAA0BC,GAA1B,SAAAhE,EAAA,sDACI2C,KAAKC,MAAMqB,iBAAmBZ,EAAgBa,QAAUb,EAAgBc,YAAYH,EAAOI,SAASzD,GAAIgC,KAAKkB,MAAMN,MAEnHZ,KAAKC,MAAMyB,+BAA+B1B,KAAKC,MAAMJ,OAHzD,gD,2EAMA,WAAU,IAAD,OACL,OACI,cAACiB,EAAsBa,SAAvB,UACK,SAACC,GAAD,OACG,cAACC,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAAS,kBAAM,EAAKZ,oBAAL,OAAyBS,QAAzB,IAAyBA,OAAzB,EAAyBA,EAASP,SAAhF,SACK,EAAKpB,MAAMqB,iBAAmBxB,EAAakC,MAAQlC,EAAamC,c,GAtB/C1B,IAAMC,W,iBCT3B0B,E,4JACjB,WACI,OACI,eAACC,EAAA,EAAD,WACI,cAACA,EAAA,EAASC,OAAV,CAAiBN,QAAQ,YAAzB,SACI,cAAC,IAAD,MAGJ,cAACK,EAAA,EAASE,KAAV,UACI,cAACF,EAAA,EAASG,KAAV,CAAeC,KAAMvC,KAAKC,MAAMuC,MAAMC,IAAtC,sC,GATuBlC,IAAMC,WCQ5BkC,G,mKACjB,WAAU,IAAD,IACL,OACI,+BACI,6BACI,cAAC,EAAD,CACIpB,iBAAkBtB,KAAKC,MAAMqB,iBAC7BV,KAAM,CAACZ,KAAKC,MAAMuC,MAAMC,KACxBf,+BAAgC1B,KAAKC,MAAMyB,+BAC3C7B,MAAOG,KAAKC,MAAMJ,UAE1B,6BAAI,sBAAM8C,UAAU,aAAhB,SAA8B3C,KAAKC,MAAMuC,MAAMI,iBACnD,6BAAK5C,KAAKC,MAAMuC,MAAMlC,OACtB,6BAAI,cAAC,EAAD,CAAaJ,QAASF,KAAKC,MAAMuC,MAAMtC,YAC3C,iDAAKF,KAAKC,MAAMuC,MAAMK,aAAtB,aAAK,EAAwBvC,YAA7B,QAAqC,aACrC,6BAAKb,EAAcO,KAAKC,MAAMuC,MAAMM,eACpC,6BAAI,cAAC,EAAD,CAAeN,MAAOxC,KAAKC,MAAMuC,iB,GAhBTjC,IAAMC,YCH7BuC,E,kDACjB,WAAY9C,GAAyB,IAAD,8BAChC,cAAMA,IAKV+C,mBAAqB,SAACC,GAClB,IACMC,EADcD,GAAe,EAAK/B,MAAMgC,uBACD,EAAID,EAEjD,EAAKE,SAAS,CAAED,2BARhB,EAAKhC,MAAQ,CAAEgC,uBAAwB,GACvC,EAAKF,mBAAmB5B,KAAxB,gBAHgC,E,0CAapC,WAAU,IAAD,OACL,OAAKpB,KAAKC,MAAM7B,OAKZ,eAACgF,EAAA,EAAD,CAAOC,OAAK,EAAZ,UACI,gCACI,+BACI,uBACA,mCACA,uCACA,2CACA,uCACA,0CACA,4BAGR,gCACKrD,KAAKC,MAAM7B,OAAQuB,KAAI,SAAC6C,EAAO3C,GAC5B,OACI,cAAC,EAAD,CAEI2C,MAAOA,EACP3C,MAAOA,EACP6B,+BAAgC,EAAKsB,mBACrC1B,iBAAkB,EAAKJ,MAAMgC,uBAAyBrD,GAL1D,UACY2C,EAAMxE,GADlB,YACwB6B,YApBjC,mD,GAhBqBU,IAAMC,W,mCCTzB8C,E,4IACjB,WAA8BC,GAA9B,mGAEetG,EAAcK,IAAd,UALH,4CAKG,iBAA4DiG,EAAI/D,KAAK,QAFpF,gCAIQ7B,QAAQD,MAAR,kEAAyE6F,EAAzE,OACA5F,QAAQD,MAAR,wBALR,wD,8DCHiB8F,E,4IACjB,WAA8BpF,GAA9B,gFACQqF,EAAWrF,EAAOuB,KAAI,qBAAG3B,OAChBuB,OAAS,MAClBkE,EAAWA,EAASC,MAAM,EAAG,MAHrC,kBAO+BJ,EAAeK,iBAAiBF,GAP/D,UAOcjG,EAPd,gDASmB,IATnB,gCAYeA,EAASa,KAAKuF,gBAZ7B,2DAce,IAdf,0D,yHAkBA,WAA2BxF,EAAuByF,GAAlD,kFACQC,EAAuC,GAD/C,kBAG8BN,EAAaG,iBAAiBvF,GAH5D,OAGQ0F,EAHR,8DAKQnG,QAAQD,MAAR,+CALR,kBAMe,IANf,eASUqG,EAASD,EAAcE,MAAK,SAAC3G,EAAG4G,GAAJ,OAAU5G,EAAE6G,OAASD,EAAEC,UACrDL,GACAE,EAAOI,UAGLC,EAAsB,SAAC,GAAD,IAAGpG,EAAH,EAAGA,GAAH,OAAiCI,EAAOiG,MAAK,SAAC7B,GAAD,OAAWA,EAAMxE,IAAMA,MAdpG,kBAgBW+F,EACFpE,KAAI,SAAC2E,GAAD,OAAaF,EAAoBE,MAErCC,QAAO,SAAC/B,GAAD,QAAaA,MAnB7B,yD,yECPiBgC,E,kDAGjB,WAAYvE,GAA6B,IAAD,8BACpC,cAAMA,IACDiB,MAAL,eACOjB,GAGP,EAAKwE,gBAAkB,EAAKA,gBAAgBrD,KAArB,gBANa,E,mDASxC,WAA8C,IAA9ByC,EAA6B,wDACzC,GAAI7D,KAAKkB,MAAMwD,UAAY1E,KAAK4B,QAAQP,OAAQ,CAC5C,IAAMsD,EAAW3E,KAAK4B,QAAQP,OAAOI,SAASzD,GACxCI,EAAS4B,KAAKkB,MAAMwD,SAAStG,OAAOuB,KAAI,qBAAG6C,SACjDgB,EAAaoB,cAAcxG,EAAQyF,GAAY1F,MAAK,SAACC,GACjD,IAAMwC,EAAOxC,EAAOuB,KAAI,qBAAG8C,OAC3B/B,EAAgBc,YAAYmD,EAAU/D,S,oBAKlD,WAAU,IAAD,OACL,IAAKZ,KAAKC,MAAMyE,SACZ,OAAO,wCAFN,MAKwC1E,KAAKC,MAAMyE,SAAhDpE,EALH,EAKGA,KAAMuE,EALT,EAKSA,YAAaC,EALtB,EAKsBA,MAAO1G,EAL7B,EAK6BA,OAE9B2G,EAAiB,EAGrB,OAFA3G,EAAO4G,SAAQ,gBAAGxC,EAAH,EAAGA,MAAH,OAAgBuC,GAAkBvC,EAAMM,eAGnD,eAACmC,EAAA,EAAD,CAAKC,MAAO,CAAEC,aAAc,IAA5B,UAEI,cAACC,EAAA,EAAD,CAAKC,GAAG,OAAR,SAEI,cAACC,EAAA,EAAD,CAAOC,IAAKvF,KAAKC,MAAMyE,SAAUc,OAAO,GAAGpI,IAAKqI,MAAO,IAAKC,OAAQ,IAAKR,MAAO,CAAES,OAAQ,uBAE9F,eAACP,EAAA,EAAD,WACI,6BAAK9E,IACL,4BAAIuE,IACJ,2CAAcC,EAAMc,gBACpB,8BACKxH,EAAOmB,OADZ,WAC4Bf,EAAauG,MAEzC,eAAC5C,EAAA,EAAD,CAAU0D,GAAIC,IAAd,UACI,cAACjE,EAAA,EAAD,CAAQC,QAAQ,UAAUiE,UAAQ,EAAlC,kBAIA,cAAC5D,EAAA,EAASC,OAAV,CAAiB4D,OAAK,EAAClE,QAAQ,UAA/B,SACI,cAAC,IAAD,MAGJ,eAACK,EAAA,EAASE,KAAV,WAEI,cAACF,EAAA,EAASG,KAAV,CAAeP,QAAS,kBAAM,EAAK0C,mBAAnC,4CACA,cAACtC,EAAA,EAASG,KAAV,CAAeP,QAAS,kBAAM,EAAK0C,iBAAgB,IAAnD,4D,GA3DgBlE,IAAMC,WAA7BgE,EACVyB,YAAcnF,E,ICdJoF,E,4JACjB,WACI,OACI,+D,GAHmC3F,IAAMC,WCchC2F,E,kDACjB,WAAYlG,GAA6C,IAAD,uBACpD,cAAMA,IACDiB,MAAQ,CACTkF,WAAYnG,EAAMoG,MAAMC,OAAOtI,IAGnC,EAAKuI,eAAiB,EAAKA,eAAenF,KAApB,gBACtB,IAAMgF,EAAanG,EAAMoG,MAAMC,OAAOtI,GAPc,OAQpD,EAAKkD,MAAQ,CAAEkF,cAEf,EAAKI,aAAe,EAAKA,aAAapF,KAAlB,gBACpB,EAAKoF,aAAaJ,GAXkC,E,sDAcxD,SAAmBK,GACf,GAAIzG,KAAKC,MAAMyG,WAAaD,EAAUC,SAAU,CAC5C,IAAMN,EAAapG,KAAKC,MAAMoG,MAAMC,OAAOtI,GAC3CgC,KAAKwG,aAAaJ,M,0BAI1B,SAAaA,GAAqB,IAAD,OAC7BnI,EAAgB0I,YAAYP,GAAYjI,MAAK,SAACuG,GACtCA,GACA,EAAKvB,SAAS,CAAEiD,aAAY1B,kB,4BAOxC,SAAeA,GAAqC,IAAD,OACzCkC,EAA2B,2BAC1BlC,GAD0B,IAE7BtG,OAAQ,MhBhCb,SAAP,mCgBmCQyI,CAAWnC,EAAStG,OAAOmE,MAAMpE,MAAK,SAACC,GACnCwI,EAAYxI,OAASA,EAAOC,KAAKC,MAEjC,EAAK6E,SAAL,2BACO,EAAKjC,OADZ,IAEIwD,SAAUkC,U,oBAKtB,WAAU,IAAD,EACL,IAAK5G,KAAKkB,MAAMwD,SACZ,OAAO,cAAC,EAAD,IAIX,IAAMtG,EAAM,UAAG4B,KAAKkB,MAAMwD,gBAAd,aAAG,EAAqBtG,OAAOuB,KAAI,qBAAG6C,SAElD,OACI,eAACsE,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAAC,EAAD,CAAgBrC,SAAU1E,KAAKkB,MAAMwD,WACrC,cAAC,EAAD,CAAYtG,OAAQA,W,GA3DMmC,IAAMC,WCT3BwG,E,4JACjB,WA8BI,OACI,gCACI,sCACA,qBAAKzB,IAAI,4EAA4EG,OAAO,QAAQD,MAAM,iB,GAlCnFlF,IAAMC,WCH9B,SAASyG,IACpB,OACI,eAACH,EAAA,EAAD,CAAWC,OAAK,EAACpE,UAAU,mBAA3B,UACI,mDASJ,cAAC7B,EAAsBa,SAAvB,UACK,SAACC,GACE,IAAIW,OAAOvB,EAKX,OAJIY,GAAWA,EAAQsF,iBACnB3E,EAAOX,EAAQsF,eAAeC,cAI9B,mBAAG5E,KAAMA,EAAT,SACI,cAACV,EAAA,EAAD,CAAQC,QAAQ,kBAAkBiE,UAAWxD,EAA7C,2B,cCrBlB6E,GAAU,qCAEKC,G,kGACjB,SAAqBrJ,GACjB,IACI,OAAOf,EAAcK,IAAd,UAAmC8J,GAAnC,YAA8CpJ,IACvD,MAAON,GACLC,QAAQD,MAAR,yCAAgDM,EAAhD,qBAA+DN,O,gCAIvE,SAA0BM,GACtB,IAEI,OAAOf,EAAcK,IAAd,UAAgD8J,GAAhD,YAA2DpJ,EAA3D,0BACT,MAAON,GACLC,QAAQD,MAAR,wDAA+DM,EAA/D,oBAA6EN,S,KChBpE4J,G,qIACjB,WAAuBtJ,GAAvB,uFAC2BqJ,GAAgBE,cAAcvJ,GADzD,UACUR,EADV,iFAMWA,EAASa,MANpB,2C,8HASA,8FAAkCL,EAAlC,EAAkCA,GAAlC,SAC2BqJ,GAAgBG,mBAAmBxJ,GAD9D,UACUR,EADV,iFAMWA,EAASa,KAAKD,QANzB,2C,8DCMiBqJ,G,kDACjB,WAAYxH,GAAyB,IAAD,8BAChC,cAAMA,IACDiB,MAAQ,CACTwG,SAAUzH,EAAMoG,MAAMC,OAAOtI,IAGjC,EAAK2J,WAAa,EAAKA,WAAWvG,KAAhB,gBAClB,EAAKwG,cAAgB,EAAKA,cAAcxG,KAAnB,gBACrB,EAAKmF,eAAiB,EAAKA,eAAenF,KAApB,gBACtB,EAAKuG,aAT2B,E,8CAYpC,WAAc,IAAD,OACTL,GAAcO,UAAU7H,KAAKkB,MAAMwG,UAC9BvJ,MAAK,SAACgC,GACCA,IACA,EAAKgD,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+Bf,YAC/B,EAAKyH,cAAczH,OAK1B5B,OAAM,SAACb,GAAD,OAAWC,QAAQD,MAAMA,Q,2BAGxC,SAAcyC,GAAuB,IAAD,OAChCmH,GAAcE,mBAAmBrH,GAAQhC,MAAK,SAAC2J,GACvCA,GACA,EAAK3E,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+B4G,oB,4BAK3C,SAAe3H,GACXH,KAAKmD,SAAL,2BACOnD,KAAKkB,OADZ,IAEIf,OAAQA,KAGZH,KAAK4H,cAAczH,K,oBAGvB,WACI,IAAI4H,EAEJ,GAAK/H,KAAKkB,MAAMf,OAMT,CAAC,IAAD,MAC0CH,KAAKkB,MAAMf,OAAhD6H,EADL,EACKA,OAAQxC,EADb,EACaA,OAAQlF,EADrB,EACqBA,KAAM2H,EAD3B,EAC2BA,WACxBC,EAAc,CAChBC,GAAI3C,EAAOnB,MAAK,SAAC+D,GAAD,OAA4B,MAAjBA,EAAM1C,UACjC2C,GAAI7C,EAAOnB,MAAK,SAAC+D,GAAD,OAA4B,MAAjBA,EAAM1C,UACjC4C,GAAI9C,EAAOnB,MAAK,SAAC+D,GAAD,OAA4B,MAAjBA,EAAM1C,WAG/B6C,EAAU,oBAAGL,EAAYG,UAAf,QAAqBH,EAAYI,UAAjC,QAAuCJ,EAAYC,GAC7DK,EAAcR,EAAOrI,KAAI,SAAC8I,GAAD,OAC3B,cAACC,GAAA,EAAD,CAAmBxD,MAAO,CAAEyD,YAAa,GAAK7G,QAAQ,YAAtD,SACK2G,GADOA,MAKhBV,EACI,gCACKQ,EAAa,cAACjD,EAAA,EAAD,CAAOC,IAAKgD,EAAWnL,MAAU,8CAC/C,eAAC6H,EAAA,EAAD,WACI,cAACG,EAAA,EAAD,CAAKS,GAAI,KAAMR,GAAI,OAAnB,SACK/E,IAEL,cAAC8E,EAAA,EAAD,UACI,eAACjD,EAAA,EAAD,WACI,cAACA,EAAA,EAASC,OAAV,CAAiBN,QAAQ,YAAzB,SACI,cAAC,IAAD,MAGJ,cAACK,EAAA,EAASE,KAAV,UACI,cAACF,EAAA,EAASG,KAAV,CAAeC,KAAMvC,KAAKkB,MAAMf,OAAOsC,IAAvC,uCAKhB,cAACwC,EAAA,EAAD,UACI,eAACG,EAAA,EAAD,CAAKS,GAAI,IAAT,qBAAuB2C,OAE3B,cAACvD,EAAA,EAAD,UACI,eAACG,EAAA,EAAD,CAAKS,GAAI,IAAT,0BAA4BoC,EAA5B,sBAEJ,cAAChD,EAAA,EAAD,UACI,cAACG,EAAA,EAAD,CAAKS,GAAI,KAAT,0BAEJ,cAACZ,EAAA,EAAD,UACI,cAACG,EAAA,EAAD,UACI,cAAC,EAAD,CAAYhH,OAAQ4B,KAAKkB,MAAM4G,wBAlD/CC,EACI,cAAC,IAAMa,SAAP,UACI,sFAuDZ,OACI,8BACI,cAAC9B,EAAA,EAAD,CAAWC,OAAK,EAAhB,SAAkBgB,U,GA1GMxH,IAAMC,W,UCdxC4G,GAAU,gCAEKyB,G,oGACjB,WAA2E,IAApDC,EAAmD,uDAArC,GAAIC,EAAiC,uCAAjBC,EAAiB,uCACtE,IAAID,IAASC,EAAb,CAKA,IAAIC,EAAS,iBAAaH,GAI1B,OAHIC,EAAOE,GAAS,iBAAcF,GACzBC,IAAQC,GAAS,kBAAeD,IAElC/L,EAAcK,IAAd,UAAwE8J,GAAxE,kCAAyG6B,IAR5GtL,QAAQD,MAAM,iD,0BAWtB,WACI,OAAOT,EAAcK,IAAd,UAA0D8J,GAA1D,mB,KCnBM8B,G,2IACjB,6GAA6BJ,EAA7B,+BAA2C,GAAIC,EAA/C,uBAA+DC,EAA/D,yCAE+BH,GAAcM,gBAAgBL,EAAOC,EAAOC,GAF3E,YAEcxL,EAFd,iDAImBA,EAASa,KAAKC,MAAMqB,KAAI,YAAgB,IAAb6C,EAAY,EAAZA,MAE9B,OADA7E,QAAQC,IAAI4E,GACLA,MANvB,gCAUe,IAVf,yCAYQ7E,QAAQD,MAAR,MAZR,kBAae,IAbf,0D,uHAiBA,uGACWmL,GAAcO,eAChBjL,MAAK,qBAAGE,KAAQC,SAChBC,OAAM,SAAAb,GACHC,QAAQD,MAAR,wDAA+DA,QAJ3E,2C,6DCZiB2L,G,kDACjB,WAAYpJ,GAAY,IAAD,6BACnB,cAAMA,GACNiJ,GAAYC,gBAAgB,IACvBhL,MAAK,SAACmL,GACH,EAAKnG,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+BoI,qBAElC/K,OAAM,SAACb,GACJC,QAAQD,MAAMA,MAGtB,EAAKwD,MAAQ,CACToI,aAAc,IAXC,E,0CAevB,WACI,IAAMC,EAAavJ,KAAKkB,MAAMoI,aAAa3J,KAAI,SAAC6C,GAAD,OAC3C,cAACgH,GAAA,EAAD,CAAqB7G,UAAU,yBAA/B,SACI,eAAC6G,GAAA,EAAKC,KAAN,WACI,cAACD,GAAA,EAAKE,MAAN,UAAalH,EAAMlC,OACnB,eAACkJ,GAAA,EAAKG,KAAN,CAAWhH,UAAU,aAArB,oBAEI,cAAC,EAAD,CAAazC,QAASsC,EAAMtC,iBAL7BsC,EAAMxE,OAWrB,OACI,eAAC,IAAM4K,SAAP,WACI,uDACA,qBAAKjG,UAAU,QAAQuC,MAAO,CAAE0E,UAAW,QAA3C,SACKL,IAEL,8B,GAnCsBhJ,IAAMC,WCR/BqJ,GAAW,mCAUXC,GARA,CACTC,YAAa,uDCDV,SAAeC,GAAtB,mC,8CAAO,WAAsC3L,GAAtC,eAAAhB,EAAA,sEACoBH,IAAM+M,KAAK,yCAA0C,KAAM,CAC9E3D,OAAQjI,EACR6L,QAAS,CACL,eAAgB,uCAJrB,cACG1M,EADH,yBAQIA,EAASa,MARb,4C,0BCEc8L,G,6GAMjB,WACI,IAAMC,EAAWpK,KAAKqK,eAGtB,OAFAC,SAASC,OAAT,wBAAmCH,GAE5BA,I,+BAGX,WAEI,IAGMA,EAHUE,SAASC,OAAOvE,MAAM,MAGbzB,QAAO,SAACgG,GAAD,OAAYA,EAAOC,WAAW,oBAG9D,OAAOJ,EAAS7K,OAAS,EAAI6K,EAAS,GAAGpE,MAAM,KAAK,QAAKhF,I,8EAM7D,WAAuCoJ,GAAvC,oFACUK,EAAuBzK,KAAK0K,OAAOlL,KAAK,KAE1CpC,EAHR,UFjCwB,yCEiCxB,sBAG2CyM,GAH3C,4CAGuFC,GAAOC,YAH9F,kBAGmHY,mBAAmBF,IAHtI,SAKuBzK,KAAK4K,OAAOR,GALnC,cAKUS,EALV,OAMUC,EAAiB9K,KAAK+K,gBAAgBF,GAE5CzN,GAAG,qDAAkD0N,GARzD,kBAUW1N,GAVX,gD,iFAaA,WACI,IAAIiN,EAAwB,GAMtBW,EAAgB,IAAIC,WAHJ,IAItBC,OAAOC,OAAOC,gBAAgBJ,GAU9B,IANA,IAAMK,EAAqB,iEAIrBC,EADa,IACSD,EAAmB9L,OAEtCgM,EAAI,EAAGA,EAdM,GAcaA,IAC/BlB,GAAgBgB,EAAmBrM,KAAKC,MAAMD,KAAKwM,IAAIR,EAAcO,IAAMD,IAG/E,OAAOjB,I,oBAGX,SAAcD,GACV,IACM/L,GADU,IAAIoN,aACCC,OAAOtB,GAE5B,OAAOc,OAAOC,OAAOQ,OAAOC,OAAO,UAAWvN,K,6BAGlD,SAAuBwM,GACnB,IAAMgB,EAAsB,IAAIZ,WAAWJ,GAI3C,OAAOiB,KAAKC,OAAOC,aAAaC,MAAM,KAAMJ,IACvCK,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAAKA,QAAQ,MAAO,M,iEAUhE,WAA0BC,EAAkBC,GAA5C,yEAE4B,IAClBC,EAAoC,IAAnBF,EAAMG,WACvBC,EAAcF,EAFI,IAIxBG,WAAU,sBAAC,4BAAAnP,EAAA,sEACuC2M,GAAuB,CACjEyC,WAAY,gBACZC,cAAeP,EAAMO,cACrBC,UAAW9C,KAJR,QACD+C,EADC,SAQHR,EAASQ,GARN,2CAWRL,GAjBP,2C,2FAqBA,SAA4BM,EAAczC,GAStC,OAAOJ,GARwB,CAC3B2C,UAAW9C,GACX4C,WAAY,qBACZI,KAAMA,EACNC,aAAchD,GAAOC,YACrBgD,cAAe3C,Q,cCtHZ4C,K,8EAAf,sBAAA3P,EAAA,+EACW,IAAIQ,SAAQ,SAACoP,GACZ/B,OAAOgC,QACPD,EAAQ/B,OAAOgC,SAGfhC,OAAOiC,6BAA+B,WAClCF,EAAQ/B,OAAOgC,cAP/B,4C,sBAaO,SAAeE,GAAtB,mC,8CAAO,WAAgCjB,GAAhC,mBAAA9O,EAAA,sEACsB2P,KADtB,uBACKK,EADL,EACKA,OAEFC,EAAkC,CACpChN,KAAM,WACNiN,cAAe,SAAAnB,GACXA,EAASD,EAAMqB,eAEnBC,OAAQ,IART,kBAWI,IAAIJ,EAAOC,IAXf,4C,sBDVcnD,GAEVO,OAAoB,CAAC,6BAA8B,2BAA4B,YAClF,kBAAmB,oBAAqB,wBAAyB,6B,uBECpDgD,G,kDACjB,WAAYzN,GAAY,IAAD,8BACnB,cAAMA,IACDiB,MAAQ,CAAEyM,UAAW,IAE1BzE,GAAYE,eAAejL,MAAK,SAACwP,GACzBA,GACA,EAAKxK,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+ByM,kBANpB,E,0CAWvB,WACI,OACI,eAAC,IAAM/E,SAAP,WACI,2CACA,cAACgF,GAAA,EAAD,UACK5N,KAAKkB,MAAMyM,UAAUhO,KAAI,SAAC+E,GAAD,OACtB,cAAC,IAAD,CAAwBrE,GAAE,0CAAqCqE,EAAS1G,IAAxE,SACI,cAAC4P,GAAA,EAAUtL,KAAX,UAAiBoC,EAASpE,QADnBoE,EAAS1G,gB,GAlBFuC,IAAMC,WCNjC,SAASqN,KACpB,IAAMC,EAAU,yBAChB,OACI,sBAAKnL,UAAU,cAAf,UACI,cAAC,IAAD,CAAMA,UAAU,MAAMtC,GAAIyN,EAA1B,SACI,cAACjM,EAAA,EAAD,CAAQkM,KAAK,KAAKjM,QAAQ,kBAA1B,oBAIJ,cAAC,IAAD,CAAMa,UAAU,MAAMtC,GAAIyN,EAAU,SAApC,SACI,cAACjM,EAAA,EAAD,CAAQkM,KAAK,KAAKjM,QAAQ,kBAA1B,6B,oDCTKkM,G,4IACjB,WAA8BC,GAA9B,oFACU7Q,EAJE,qCAIc6Q,EAElBC,EAAyC,GAHjD,kBAM+BjR,EAAcK,IAAIF,GANjD,OASQ,IAAWmO,KAHL/N,EANd,QASiCa,KACjBb,EAASa,KAAKkN,KACd2C,EAAgBA,EAAcC,OAAO3Q,EAASa,KAAKkN,GAAqBjN,QAXxF,gDAgBQX,QAAQC,IAAI,mCAhBpB,iCAmBWsQ,GAnBX,yD,kECqBiBE,G,kDACjB,WAAYnO,GAAwB,IAAD,sCAC/B,cAAMA,IAEDiB,MAAQ,CACTmN,UAAW,GACXC,WAAW,EACXC,MAAO,CACHpO,OAAM,UAAEF,EAAME,cAAR,SACNuE,SAAQ,UAAEzE,EAAMyE,gBAAR,SACRlC,MAAK,UAAEvC,EAAMuC,aAAR,SACLK,MAAK,UAAE5C,EAAM4C,aAAR,WAIb,EAAK2L,OAAS,EAAKA,OAAOpN,KAAZ,gBAdiB,E,0CAiBnC,SAAOqN,GAA+B,IAAD,OACjC,GAAc,UAAVA,EAAEC,IAAN,CAIA,IAAMC,EAAgBC,OAAOC,KAAK7O,KAAKkB,MAAMqN,OAAOhK,QAAO,SAACuK,GAAD,OAAO,EAAK5N,MAAMqN,MAAMO,MAC7ET,EAAaI,EAAEM,OAA4BC,aAEjDhB,GAAgBiB,iBC/CjB,SAAqBZ,EAAmBE,GAC3C,IAAIN,EAAK,YAAQI,GAOjB,OALIE,EAAMhP,OAAS,IAEf0O,GADkB,SAAWM,EAAM/O,KAAK,MAIrCyO,EDuC8BiB,CAAYb,EAAWM,IAAgBxQ,MAAK,SAACgR,GAC1E,EAAKhM,SAAL,2BACO,EAAKjC,OADZ,IAEI5C,MAAO6Q,EACPb,WAAW,W,oBAKvB,WAAU,IAAD,SAGCc,EAAW,UAAGpP,KAAKkB,MAAM5C,aAAd,aAAG,EAAkBqB,KAAI,SAAC0P,EAAM9D,GAC7C,IAAM+D,EChDX,SAAiBD,GACpB,OAAKA,EAA+BE,WACzB,QACCF,EAAsBrH,OACvB,SACCqH,EAAkCjR,OACnC,WACCiR,EAAqBzM,aACtB,QAGJ,0CDqCc4M,CAAQH,GAErB,OACI,6BACI,cAAC,IAAD,CAAM1M,UAAU,MAAMtC,GAAE,UAPpB,yBAOoB,YAAgBiP,EAAhB,YAAwBD,EAAKrR,IAArD,SACI,cAAC6D,EAAA,EAAD,CACIc,UAAU,qBACVZ,QAAS,WACL,EAAKoB,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+BoN,WAAW,EAAOD,UAAW,OAHpE,mBAKQiB,EALR,aAKiBD,EAAK/O,WAPrBiL,MAcjB,OACI,gCACI,eAACkE,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAgBC,MAAM,SAAShN,UAAU,kBAAzC,UACI,cAACR,EAAA,EAASyN,QAAV,IACA,cAACC,GAAA,EAAKC,MAAN,CACIC,QAAM,EACNhK,UAAW/F,KAAKC,MAAM4C,MACtBmN,QAAShQ,KAAKkB,MAAMqN,MAAM1L,MAC1BoN,MAAM,QACNC,SAAU,WACN,EAAK/M,SAAS,CAAEoL,MAAM,2BAAM,EAAKrN,MAAMqN,OAAlB,IAAyB1L,OAAQ,EAAK3B,MAAMqN,MAAM1L,aAG/E,cAACgN,GAAA,EAAKC,MAAN,CACIC,QAAM,EACNhK,UAAW/F,KAAKC,MAAME,OACtB6P,QAAShQ,KAAKkB,MAAMqN,MAAMpO,OAC1B8P,MAAM,SACNC,SAAU,WACN,EAAK/M,SAAS,CAAEoL,MAAM,2BAAM,EAAKrN,MAAMqN,OAAlB,IAAyBpO,QAAS,EAAKe,MAAMqN,MAAMpO,cAGhF,cAAC0P,GAAA,EAAKC,MAAN,CACIC,QAAM,EACNhK,UAAW/F,KAAKC,MAAMyE,SACtBsL,QAAShQ,KAAKkB,MAAMqN,MAAM7J,SAC1BuL,MAAM,WACNC,SAAU,WACN,EAAK/M,SAAS,CAAEoL,MAAM,2BAAM,EAAKrN,MAAMqN,OAAlB,IAAyB7J,UAAW,EAAKxD,MAAMqN,MAAM7J,gBAGlF,cAACmL,GAAA,EAAKC,MAAN,CACIC,QAAM,EACNhK,UAAW/F,KAAKC,MAAMuC,MACtBwN,QAAShQ,KAAKkB,MAAMqN,MAAM/L,MAC1ByN,MAAM,QACNC,SAAU,WACN,EAAK/M,SAAS,CAAEoL,MAAM,2BAAM,EAAKrN,MAAMqN,OAAlB,IAAyB/L,OAAQ,EAAKtB,MAAMqN,MAAM/L,gBAInF,cAAC2N,GAAA,EAAD,CACItK,GAAG,QACHuK,YAAY,SACZxQ,MAAOI,KAAKkB,MAAMmN,UAClBgC,UAAWrQ,KAAKwO,OAChB0B,SAAU,SAACzB,GAAD,OAAO,EAAKtL,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+BmN,UAAWI,EAAEM,OAAOnP,eAG5E,eAAC0Q,GAAA,EAAD,CACIC,KAAMvQ,KAAKkB,MAAMoN,UACjBkC,OAAQ,WACJ,EAAKrN,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+BoN,WAAW,MAHlD,UAKI,cAACgC,GAAA,EAAMG,OAAP,UACI,cAACH,GAAA,EAAM5G,MAAP,+BAEJ,cAAC4G,GAAA,EAAM7G,KAAP,UACI,6BAAK2F,MAET,cAACkB,GAAA,EAAMI,OAAP,UACI,cAAC7O,EAAA,EAAD,CACIE,QAAS,WACL,EAAKoB,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+BoN,WAAW,MAFlD,+B,GAtHe/N,IAAMC,WEPxBmQ,G,kDACjB,WAAY1Q,GAAY,IAAD,wBACnB,cAAMA,GAGN,IAAMmK,EAAQ,UAAGD,GAAYyG,2BAAf,QAAsCzG,GAAY0G,2BAG1DhE,EAAO,IAAIiE,gBAAgB5F,OAAOxE,SAAS8H,QAAQlR,IAAI,QAP1C,OAUduP,EAMD1C,GAAY4G,qBAAqBlE,EAAMzC,GAAUjM,MAAK,SAAC6S,GlC/B5D,IAAmB7E,EkCgCN6E,KlChCM7E,EkCiCI6E,KlC/BtB/T,EAAcgU,SAAS/G,QAAQgH,OAA/B,cAAyD,UAAY/E,EAAMqB,ckCgC/D,EAAK2D,qBAAqBH,OAPlC,EAAKI,WAAWhH,GAYpB,EAAKlJ,MAAQ,CACTmQ,OAAQ,WACJ,EAAKD,WAAWhH,GAChB,EAAKjH,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+B8P,eAAWhQ,OA3B/B,E,8CAgCvB,SAAWoJ,GAAmB,IAAD,OACzBD,GAAYmH,0BAA0BlH,GAAUjM,MAAK,SAACgJ,GAClD,IAAMD,EAAiC,CAAEC,eAAciD,YACvD,EAAKjH,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+BgG,yB,oBAIvC,WACI,IAAM4G,EAAU,yBAEhB,OAAK9N,KAAKkB,MAAM8P,UASZ,cAAClQ,EAAsByQ,SAAvB,CAAgC3R,MAAOI,KAAKkB,MAA5C,SACI,cAAC,IAAD,UACI,cAAC4F,EAAA,EAAD,CAAWC,OAAK,EAACpE,UAAU,QAA3B,SACI,sBAAKA,UAAU,2BAAf,UACI,eAACsC,EAAA,EAAD,CAAKjH,GAAG,SAAR,UACI,cAACoH,EAAA,EAAD,UACI,oDAEJ,cAACA,EAAA,EAAD,UACI,cAAC,GAAD,CAAWjF,QAAQ,EAAMuE,UAAU,EAAMlC,OAAO,EAAMK,OAAO,MAEjE,eAACuC,EAAA,EAAD,WACI,cAACyI,GAAD,IACA,cAAChM,EAAA,EAAD,CAAQkM,KAAK,KAAKjM,QAAQ,OAAOC,QAAS/B,KAAKkB,MAAMmQ,OAAQ1O,UAAU,cAAvE,2BAKR,eAACsC,EAAA,EAAD,CAAKtC,UAAU,cAAf,UACI,cAACyC,EAAA,EAAD,CAAKiD,GAAG,IAAI1F,UAAU,gBAAgB3E,GAAG,yBAAzC,SACI,cAAC,GAAD,MAEJ,cAACoH,EAAA,EAAD,CAAKiD,GAAG,IAAI1F,UAAU,gBAAtB,SACI,eAAC6O,GAAA,EAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM5D,EAAS6D,UAAWtI,KACvC,cAAC,IAAD,CAAOoI,OAAK,EAACC,KAAM5D,EAAU,SAAU6D,UAAW3K,IAClD,cAAC,IAAD,CAAO0K,KAAM5D,EAAU,cAAe6D,UAAWlK,KACjD,cAAC,IAAD,CAAOiK,KAAM5D,EAAU,gBAAiB6D,UAAWxL,qBAlC3E,cAACrF,EAAsByQ,SAAvB,CAAgC3R,MAAOI,KAAKkB,MAA5C,SACI,cAAC+F,EAAD,Q,yEA4ChB,WAA2BkF,GAA3B,sBAAA9O,EAAA,sEACgD+P,GAAiBjB,GADjE,QACU9K,EADV,QAEWuQ,UAAUrT,OAAM,SAACb,GACpBC,QAAQD,MAAM,2BAA4BA,MAG9C2D,EAAOwQ,GAAG,SAAS,SAACC,GAChB,IAAMzQ,EAAS,EAAKH,MAAMG,OAC1BA,EAAQI,SAASzD,GAAK8T,EAAOnR,UAE7B,EAAKwC,SAAL,2BAAmB,EAAKjC,OAAxB,IAA+BG,OAAQA,QAG3CrB,KAAKmD,SAAL,2BAAmBnD,KAAKkB,OAAxB,IAA+B8P,UAAW7E,EAAO9K,OAAQA,KACzD8I,GAAY4H,aAAa5F,EAAOnM,KAAKmR,sBAdzC,gD,4DA1F6B5Q,IAAMC,WCRxBwR,GAZS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,8BAAqB/T,MAAK,YAAkD,IAA/CgU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCApBO,IAASC,OACL,cAAC,IAAD,UACI,cAAC,GAAD,MAEJnI,SAASoI,eAAe,SAM5BV,M","file":"static/js/main.99e2ca07.chunk.js","sourcesContent":["import axios from \"axios\"\nimport { AuthToken } from \"../Models/Authentication\"\n\nconst axiosInstance = axios.create({})\n\n// set authorization header so that we don't have to specify it with every request\nexport function initAxios(token: AuthToken) {\n    if (token) {\n        axiosInstance.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token.access_token\n    }\n}\n\n// default error handling for responses\naxiosInstance.interceptors.response.use((response) => {return response}, (error) => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\n// generic get request to any url provided\nexport async function getRequest(url: string): Promise<any> {\n    return await axiosInstance.get(url)\n}\n\nexport default axiosInstance\n","import { AxiosResponse } from \"axios\"\nimport { GetPlaylistResponse } from \"../Models/Responses/PlaylistResponses\"\nimport { Paginated } from \"../Models/Responses/Shared\"\nimport { SimplifiedPlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/playlists\"\n\nexport default class PlaylistEndpoints {\n    static getPlaylistById(id: string) {\n        return axiosInstance.get<GetPlaylistResponse>(`${baseURL}/${id}`)\n    }\n\n    static getCurrentUserPlaylists(): Promise<AxiosResponse<Paginated<SimplifiedPlaylistObject>>> {\n        return axiosInstance.get<Paginated<SimplifiedPlaylistObject>>(\"https://api.spotify.com/v1/me/playlists\")\n    }\n}","import PlaylistEndpoints from \"../Endpoints/Playlists\"\nimport { PlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\n\nexport default class PlaylistService {\n    static async getPlaylist(id: string): Promise<PlaylistObject | undefined> {\n        return PlaylistEndpoints.getPlaylistById(id)\n            .then((response) => {\n                const tracks = response.data.tracks.items\n                return {\n                    ...response.data,\n                    tracks\n                }\n            })\n            .catch((error) => {\n                console.error(`Failed to get playlist with id: '${id}'. Error: ${error}`)\n                return undefined\n            })\n    }\n}","/**\n * Convert a length of time in ms to a sentence\n * Ex: 1 Day, 3 Hours, 12 Minutes\n */\nexport function msToSentence(ms: number) {\n    if (ms <= 0) {\n        return undefined\n    }\n\n    const msInDay = 86400000\n    const msInHour = msInDay / 24\n    const msInMinute = msInHour / 60\n\n    const labelParts: string[] = []\n    const pluralize = (count: number) => count > 1 ? \"s\" : \"\"\n    const days = Math.floor(ms / msInDay)\n    if (days > 0) {\n        labelParts.push(`${days} Day${pluralize(days)}`)\n    }\n\n    let remainder = ms % msInDay\n    const hours = Math.floor(remainder / msInHour)\n    if (hours > 0) {\n        labelParts.push(`${hours % 24} Hour${pluralize(hours)}`)\n    }\n    \n    remainder = remainder % msInHour\n    const minutes = Math.floor(remainder / msInMinute)\n    if (minutes > 0) {\n        labelParts.push(`${minutes % 60} Minute${pluralize(minutes)}`)\n    }\n\n    remainder = remainder % msInMinute\n    const seconds = Math.floor(remainder / 1000)\n    if (labelParts.length == 0 && seconds > 0) {\n        labelParts.push(`${seconds} Second${pluralize(seconds)}`)\n    }\n\n    return labelParts.join(\", \")\n}\n\nexport function msToTimestamp(ms: number) {\n    if (ms <= 0) {\n        return undefined\n    }\n\n    const seconds = Math.floor(ms / 1000)\n    const minutes = Math.floor(seconds / 60)\n    const hours = Math.floor(minutes / 60)\n\n    const labelValues: number[] = []\n    if (hours > 0) {\n        labelValues.push(hours)\n    }\n\n    if (minutes > 0 || (hours < 1)) {\n        labelValues.push(minutes % 60)\n    }\n\n    if (seconds > 0) {\n        labelValues.push(seconds % 60)\n    }\n\n    return labelValues.map((value, index) => {\n        if (index == 0) {\n            // Short circuit for the first element because we don't want\n            // To prefix the first item in the label with a 0\n            return `${value}`\n        }\n\n        if (value < 10) {\n            return `0${value}`\n        }\n\n        return `${value}`\n    }).join(\":\")\n}","/* eslint-disable */\nexport enum TrackSymbols {\n    Play = \"\\u25B6\",\n    Pause = \"\\u23F8\",\n    Next = \"\\u23E9\",\n    Previous = \"\\u23EA\"\n}\n/* eslint-enable */\n","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { SimplifiedArtistObject } from \"../../Models/SpotifyObjects/ArtistObjects\"\n\ninterface ArtistLinksProps {\n    artists: SimplifiedArtistObject[]\n}\n\nexport default class ArtistLinks extends React.Component<ArtistLinksProps, {}> {\n    render() {\n        return this.props.artists.map((artist: any, index: number, array: any[]) => {\n            if (index == array.length - 1) {\n                // Don't put a comma and space after the last artist\n                return (\n                    <Link key={artist.id} to={`/Artist/${artist.id}`}>\n                        {artist.name}\n                    </Link>\n                )\n            }\n\n            return (\n                <span key={artist.id}>\n                    <Link to={`/Artist/${artist.id}`}>{artist.name}</Link>,&nbsp;\n                </span>\n            )\n        })\n    }\n}\n","import axiosInstance from \"./AxiosConfig\"\nimport { StartResumeRequest } from \"../Models/Requests/PlayerRequests\"\nimport { GetPlaybackInfoResponse } from \"../Models/Responses/PlayerResponse\"\nimport { DeviceObject } from \"../Models/SpotifyObjects/SharedObjects\"\n\nconst basePlaybackURL = \"https://api.spotify.com/v1/me/player\"\n\nexport default class PlayerEndpoints {\n    static async getPlaybackInformation(): Promise<GetPlaybackInfoResponse> {\n        const response: GetPlaybackInfoResponse = await axiosInstance.get(basePlaybackURL)\n        return response\n    }\n\n    static startResume(device_id: string, uris: string[]) {\n        const data: StartResumeRequest = {\n            uris: uris\n        }\n\n        axiosInstance.put(`${basePlaybackURL}/play?device_id=${device_id}`, data)\n    }\n\n    static pause() {\n        axiosInstance.put(`${basePlaybackURL}/pause`)\n    }\n}\n\n// used these before implementing the sdk. They shouldn't be used unless we \n// would want to allow the user to transfer playback to another device and continue listening\n// eslint-disable-next-line\nasync function getAvailableDevices() {\n    const devices: DeviceObject[] = (await axiosInstance.get(`${basePlaybackURL}/devices`)).data.devices\n    return devices\n}\n\n// eslint-disable-next-line\nasync function transferPlayback(device_id: string) {\n    await axiosInstance.put(`${basePlaybackURL}`, { device_ids: [device_id] })\n}","import React from \"react\"\nimport { Spotify }  from \"../Models/SpotifyObjects/PlayerObjects\"\n\nexport interface AuthToken {\n    access_token: string\n    token_type: string\n    expires_in: number\n    refresh_token: string\n}\n\nexport interface TokenRetriever {\n    verifier: string,\n    redirect_url: string\n}\n\nexport interface AuthenticationContextObject {\n    authToken?: AuthToken,\n    player?: Spotify.SpotifyPlayer,\n    tokenRetriever?: TokenRetriever,\n    logOut: () => void\n}\n\nexport const AuthenticationContext = React.createContext<AuthenticationContextObject | undefined>(undefined)\n","import React from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { TrackSymbols } from \"../../Constants/Symbols\"\nimport PlayerEndpoints from \"../../Endpoints/Player\"\nimport { AuthenticationContext } from \"../../Models/Authentication\"\nimport { Spotify } from \"../../Models/SpotifyObjects/PlayerObjects\"\n\n/* eslint-disable */\ninterface PlayerButtonProps {\n    uris: string[]\n    updateCurrentlyPlayingCallback(trackNumber: number): void\n    index: number\n    currentlyPlaying?: boolean\n}\n/* eslint-enable */\n\ninterface PlayerButtonState extends PlayerButtonProps {}\n\nexport default class PlayerButton extends React.Component<PlayerButtonProps, PlayerButtonState> {\n    constructor(props: PlayerButtonProps) {\n        super(props)\n\n        this.state = {\n            ...props,\n        }\n\n        this.playerButtonClicked = this.playerButtonClicked.bind(this)\n    }\n\n    async playerButtonClicked(player: Spotify.SpotifyPlayer) {\n        this.props.currentlyPlaying ? PlayerEndpoints.pause() : PlayerEndpoints.startResume(player._options.id, this.state.uris)\n\n        this.props.updateCurrentlyPlayingCallback(this.props.index)\n    }\n\n    render() {\n        return (\n            <AuthenticationContext.Consumer>\n                {(context) => (\n                    <Button variant=\"outline-dark\" onClick={() => this.playerButtonClicked(context?.player!)}>\n                        {this.props.currentlyPlaying ? TrackSymbols.Pause : TrackSymbols.Play}\n                    </Button>\n                )}\n            </AuthenticationContext.Consumer>\n        )\n    }\n}\n","import React from \"react\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport { ThreeDotsVertical } from \"react-bootstrap-icons\"\nimport { Dropdown } from \"react-bootstrap\"\n\ninterface TrackDropDownProps {\n    track: TrackObject\n}\n\nexport default class TrackDropDown extends React.Component<TrackDropDownProps, {}> {\n    render() {\n        return (\n            <Dropdown>\n                <Dropdown.Toggle variant=\"Secondary\">\n                    <ThreeDotsVertical />\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    <Dropdown.Item href={this.props.track.uri}>Open in Spotify</Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        )\n    }\n}","import React from \"react\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport { msToTimestamp } from \"../../../Services/Utility\"\nimport ArtistLinks from \"../ArtistLinks\"\nimport PlayerButton from \"../PlayerButton\"\nimport TrackDropDown from \"./TrackDropDown\"\nimport \"./TrackTable.css\"\n\ninterface TrackTableItemProps {\n    track: TrackObject\n    // eslint-disable-next-line\n    updateCurrentlyPlayingCallback(trackNumber: number): void\n    currentlyPlaying?: boolean\n    index: number\n}\n\n\nexport default class TrackTableItem extends React.Component<TrackTableItemProps, {}> {\n    render() {\n        return (\n            <tr>\n                <td>\n                    <PlayerButton\n                        currentlyPlaying={this.props.currentlyPlaying}\n                        uris={[this.props.track.uri]}\n                        updateCurrentlyPlayingCallback={this.props.updateCurrentlyPlayingCallback}\n                        index={this.props.index}></PlayerButton>\n                </td>\n                <td><span className=\"text-muted\">{this.props.track.track_number}</span></td>\n                <td>{this.props.track.name}</td>\n                <td><ArtistLinks artists={this.props.track.artists} /></td>\n                <td>{this.props.track.album?.name ?? \"No album\"}</td>\n                <td>{msToTimestamp(this.props.track.duration_ms)}</td>\n                <td><TrackDropDown track={this.props.track} /></td>\n            </tr>\n        )\n    }\n}\n","import React from \"react\"\nimport { Table } from \"react-bootstrap\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport TrackTableItem from \"./TrackTableItem\"\n\ninterface TrackTableProps {\n    tracks?: TrackObject[]\n    currentPlayingTrack?: number\n}\n\ninterface TrackTableState {\n    currentlyPlayingTrack?: number\n}\n\nexport default class TrackTable extends React.Component<TrackTableProps, TrackTableState> {\n    constructor(props: TrackTableProps) {\n        super(props)\n        this.state = { currentlyPlayingTrack: -1 }\n        this.updateCurrentTrack.bind(this)\n    }\n\n    updateCurrentTrack = (trackNumber: number) => {\n        const trackPaused = trackNumber == this.state.currentlyPlayingTrack\n        const currentlyPlayingTrack = trackPaused ? -1 : trackNumber\n\n        this.setState({ currentlyPlayingTrack })\n    }\n\n    render() {\n        if (!this.props.tracks) {\n            return <p>Loading tracks</p>\n        }\n\n        return (\n            <Table hover>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>#</th>\n                        <th>Title</th>\n                        <th>Artist(s)</th>\n                        <th>Album</th>\n                        <th>Duration</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.tracks!.map((track, index) => {\n                        return (\n                            <TrackTableItem\n                                key={`${track.id}-${index}`}\n                                track={track}\n                                index={index}\n                                updateCurrentlyPlayingCallback={this.updateCurrentTrack}\n                                currentlyPlaying={this.state.currentlyPlayingTrack == index}\n                            />\n                        )\n                    })}\n                </tbody>\n            </Table>\n        )\n    }\n}\n","import { AudioFeaturesResponse } from \"../Models/Responses/TrackResponses\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/audio-features\"\n\nexport default class TrackEndpoints {\n    static async getAudioFeatures(ids: string[]) {\n        try {\n            return axiosInstance.get<AudioFeaturesResponse>(`${baseURL}/?ids=${ids.join(\",\")}`)\n        } catch (error) {\n            console.error(`Failed to get audio features for tracks with with ids: \"${ids}\".`)\n            console.error(`Error: ${error}`)\n        }\n    }\n}","import TrackEndpoints from \"../Endpoints/Track\"\nimport { AudioFeaturesObject, TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\n\nexport default class TrackService {\n    static async getAudioFeatures(tracks: TrackObject[]): Promise<AudioFeaturesObject[]> {\n        let trackIds = tracks.map(({ id }) => id)\n        if (trackIds.length > 100) {\n            trackIds = trackIds.slice(0, 100)\n        }\n        \n        try {\n            const response = await TrackEndpoints.getAudioFeatures(trackIds)\n            if (!response) {\n                return []\n            }\n\n            return response.data.audio_features\n        } catch {\n            return []\n        }\n    }\n\n    static async intensitySort(tracks: TrackObject[], decreasing: boolean): Promise<TrackObject[]> {\n        let audioFeatures: AudioFeaturesObject[] = []\n        try {\n            audioFeatures = await TrackService.getAudioFeatures(tracks)\n        } catch (error) {\n            console.error(`Error getting audio features: ${error}`)\n            return []\n        }\n\n        const sorted = audioFeatures.sort((a, b) => a.energy - b.energy)\n        if (decreasing) {\n            sorted.reverse()\n        }\n\n        const getTrackFromFeature = ({ id }: AudioFeaturesObject) => tracks.find((track) => track.id == id)\n\n        return sorted\n            .map((feature) => getTrackFromFeature(feature))\n            // This filter removes all undefined values. Linting doesn't know that so it complains\n            .filter((track) => !!track) as TrackObject[]\n    }\n}","import React from \"react\"\nimport { Button, ButtonGroup, Col, Dropdown, Image, Row } from \"react-bootstrap\"\nimport PlayerEndpoints from \"../../../Endpoints/Player\"\nimport TrackService from \"../../../Services/TrackService\"\nimport { CaretDownFill } from \"react-bootstrap-icons\"\nimport { AuthenticationContext } from \"../../../Models/Authentication\"\nimport { PlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\nimport { msToSentence } from \"../../../Services/Utility\"\n\ninterface PlaylistHeaderProps {\n    playlist?: PlaylistObject\n}\n\ninterface PlaylistHeaderState extends PlaylistHeaderProps {}\n\nexport default class PlaylistHeader extends React.Component<PlaylistHeaderProps, PlaylistHeaderState> {\n    static contextType = AuthenticationContext\n\n    constructor(props: PlaylistHeaderProps) {\n        super(props)\n        this.state = {\n            ...props,\n        }\n\n        this.playByIntensity = this.playByIntensity.bind(this)\n    }\n\n    playByIntensity(decreasing: boolean = false) {\n        if (this.state.playlist && this.context.player) {\n            const deviceId = this.context.player._options.id\n            const tracks = this.state.playlist.tracks.map(({ track }) => track)\n            TrackService.intensitySort(tracks, decreasing).then((tracks) => {\n                const uris = tracks.map(({ uri }) => uri)\n                PlayerEndpoints.startResume(deviceId, uris)\n            })\n        }\n    }\n\n    render() {\n        if (!this.props.playlist) {\n            return <p>Loading</p>\n        }\n\n        const { name, description, owner, tracks } = this.props.playlist!\n\n        let playlistLength = 0\n        tracks.forEach(({ track }) => (playlistLength += track.duration_ms))\n\n        return (\n            <Row style={{ marginBottom: 15 }}>\n                {/* Header */}\n                <Col xs=\"auto\">\n                    {/* Image size can be up to 640 by 640 */}\n                    <Image src={this.props.playlist!.images[0].url} width={250} height={250} style={{ border: \"1px solid black\" }} />\n                </Col>\n                <Col>\n                    <h2>{name}</h2>\n                    <p>{description}</p>\n                    <p>Owned by: {owner.display_name}</p>\n                    <p>\n                        {tracks.length} Songs. {msToSentence(playlistLength)}\n                    </p>\n                    <Dropdown as={ButtonGroup}>\n                        <Button variant=\"success\" disabled>\n                            Play\n                        </Button>\n\n                        <Dropdown.Toggle split variant=\"success\">\n                            <CaretDownFill />\n                        </Dropdown.Toggle>\n\n                        <Dropdown.Menu>\n                            {/* Is this not just the same as sorting the playlist by intensity and playing it? Shuffle doesn't seem like the right word */}\n                            <Dropdown.Item onClick={() => this.playByIntensity()}>Play by intensity (increasing)</Dropdown.Item>\n                            <Dropdown.Item onClick={() => this.playByIntensity(true)}>Play by intensity (decreasing)</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Col>\n            </Row>\n        )\n    }\n}\n","import React from \"react\"\n\nexport default class PlaylistZeroState extends React.Component {\n    render() {\n        return (\n            <h3>No songs in this playlist</h3>\n        )\n    }\n}","import React from \"react\"\nimport { Container } from \"react-bootstrap\"\nimport { RouteComponentProps } from \"react-router\"\nimport PlaylistService from \"../../../Services/PlaylistService\"\nimport { PlaylistObject, SimplifiedPlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\nimport TrackTable from \"../../Shared/TrackList/TrackTable\"\nimport PlaylistHeader from \"./PlaylistHeader\"\nimport PlaylistZeroState from \"./PlaylistZeroState\"\nimport { getRequest } from \"../../../Endpoints/AxiosConfig\"\n\ntype PlaylistPageProps = RouteComponentProps<{ id: string }>\ninterface PlaylistPageState {\n    playlistId: string\n    playlist?: PlaylistObject\n}\n\nexport default class PlaylistPage extends React.Component<PlaylistPageProps, PlaylistPageState> {\n    constructor(props: RouteComponentProps<{ id: string }>) {\n        super(props)\n        this.state = {\n            playlistId: props.match.params.id,\n        }\n\n        this.onSearchSelect = this.onSearchSelect.bind(this)\n        const playlistId = props.match.params.id\n        this.state = { playlistId }\n\n        this.loadPlaylist = this.loadPlaylist.bind(this)\n        this.loadPlaylist(playlistId)\n    }\n\n    componentDidUpdate(prevProps: PlaylistPageProps) {\n        if (this.props.location !== prevProps.location) {\n            const playlistId = this.props.match.params.id\n            this.loadPlaylist(playlistId)\n        }\n    }\n\n    loadPlaylist(playlistId: string) {\n        PlaylistService.getPlaylist(playlistId).then((playlist) => {\n            if (playlist) {\n                this.setState({ playlistId, playlist })\n            } else {\n                // Error happened, check console. In future, display error to user?\n            }\n        })\n    }\n\n    onSearchSelect(playlist: SimplifiedPlaylistObject) {\n        const newPlaylist: PlaylistObject = {\n            ...playlist,\n            tracks: [],\n        }\n\n        getRequest(playlist.tracks.href).then((tracks) => {\n            newPlaylist.tracks = tracks.data.items\n\n            this.setState({\n                ...this.state,\n                playlist: newPlaylist,\n            })\n        })\n    }\n\n    render() {\n        if (!this.state.playlist) {\n            return <PlaylistZeroState />\n        }\n\n        // Extract the TrackObjects from the PlaylistTrackObjects\n        const tracks = this.state.playlist?.tracks.map(({ track }) => track)\n\n        return (\n            <Container fluid>\n                <PlaylistHeader playlist={this.state.playlist} />\n                <TrackTable tracks={tracks} />\n            </Container>\n        )\n    }\n}\n","import React from \"react\"\n// import { Container } from \"react-bootstrap\"\n// import { AlbumObject, AlbumType } from \"../../../Models/SpotifyObjects/AlbumObjects\"\n// import { Track } from \"../../../Models/Tracks\"\n// import PlaylistHeader from \"../Playlist/PlaylistHeader\"\n// import AlbumZeroState from \"./AlbumZeroState\"\n\nexport default class AlbumPage extends React.Component {\n    render() {\n        // const { name, tracks } = this.state.album\n        // const mockTrack: Track = {\n        //     track_number: 1,\n        //     added_at: \"2/10/2021\",\n        //     artists: [],\n        //     duration_ms: 1000,\n        //     explicit: false,\n        //     href: \"link\",\n        //     id: Math.random().toString(),\n        //     is_playable: true,\n        //     name: \"My Song\",\n        //     popularity: 100\n        // }\n\n        // const mockAlbum: AlbumObject = {\n        //     album_type: AlbumType.Album,\n        //     artists: [],\n        //     genres: [\"genre\"],\n        //     href: \"href\",\n        //     id: Math.random().toString(),\n        //     images: [],\n        //     label: \"label\",\n        //     name: \"My Album Name\",\n        //     popularity: 100,\n        //     tracks:[],\n        //     release_date: \"2021\"\n\n        // }\n\n        return (\n            <div>\n                <h1>Name</h1>\n                <img src=\"https://images-na.ssl-images-amazon.com/images/I/6123EInXGSL._SL1081_.jpg\" height=\"300px\" width=\"300px\"></img>\n            </div>\n        )\n    }\n}\n","import React, { ReactNode } from \"react\"\nimport { Button, Container } from \"react-bootstrap\"\nimport { AuthenticationContext } from \"../../Models/Authentication\"\n\nexport default function LandingPage() {\n    return (\n        <Container fluid className=\"text-center mt-5\">\n            <h2>Spotify Playlist+</h2>\n            {logInButton()}\n        </Container>\n    )\n}\n// To view Spotify login API steps head to: https://developer.spotify.com/documentation/general/guides/authorization-guide/\n// We're using the Auth code with PKCE flow\nfunction logInButton(): ReactNode {\n    return (\n        <AuthenticationContext.Consumer>\n            {(context) => {\n                let href = undefined\n                if (context && context.tokenRetriever) {\n                    href = context.tokenRetriever.redirect_url\n                }\n\n                return (\n                    <a href={href}>\n                        <Button variant=\"outline-success\" disabled={!href}>Login</Button>\n                    </a>\n                )\n            }}\n        </AuthenticationContext.Consumer>\n    )\n}\n","import { ArtistObject } from \"../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/artists\"\n\nexport default class ArtistEndpoints {\n    static getArtistById(id: string) {\n        try {\n            return axiosInstance.get<ArtistObject>(`${baseURL}/${id}`)\n        } catch (error) {\n            console.error(`Failed to get artist with id: \"${id}\". Error: ${error}`)\n        }\n    }\n\n    static getArtistTopTracks(id: string) {\n        try {\n            // Hardcoding US market here because this is for a school project and I don't anticipate non-us spotify users using this\n            return axiosInstance.get<{ tracks: TrackObject[] }>(`${baseURL}/${id}/top-tracks?market=US`)\n        } catch (error) {\n            console.error(`Failed to get top tracks for artist with id: \"${id}. Error: ${error}`)\n        }\n    }\n}","import ArtistEndpoints from \"../Endpoints/Artists\"\nimport { ArtistObject } from \"../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\n\nexport default class ArtistService {\n    static async getArtist(id: string): Promise<ArtistObject | undefined> {\n        const response = await ArtistEndpoints.getArtistById(id)\n        if (!response) {\n            return\n        }\n\n        return response.data\n    }\n\n    static async getArtistTopTracks({ id }: ArtistObject): Promise<TrackObject[] | undefined> {\n        const response = await ArtistEndpoints.getArtistTopTracks(id)\n        if (!response) {\n            return\n        }\n\n        return response.data.tracks\n    }\n}","import React from \"react\"\nimport { Badge, Col, Dropdown, Image, Row } from \"react-bootstrap\"\nimport { Container } from \"react-bootstrap\"\nimport { ThreeDotsVertical } from \"react-bootstrap-icons\"\nimport { match } from \"react-router-dom\"\nimport { ArtistObject } from \"../../../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport ArtistService from \"../../../Services/ArtistService\"\nimport TrackTable from \"../../Shared/TrackList/TrackTable\"\n\ninterface ArtistPageProps {\n    match: match<{ id: string }>\n}\n\ninterface ArtistPageState {\n    artist?: ArtistObject\n    topTracks?: TrackObject[]\n    artistId: string\n}\n\nexport default class ArtistPage extends React.Component<ArtistPageProps, ArtistPageState> {\n    constructor(props: ArtistPageProps) {\n        super(props)\n        this.state = {\n            artistId: props.match.params.id,\n        }\n\n        this.loadArtist = this.loadArtist.bind(this)\n        this.loadTopTracks = this.loadTopTracks.bind(this)\n        this.onSearchSelect = this.onSearchSelect.bind(this)\n        this.loadArtist()\n    }\n\n    loadArtist() {\n        ArtistService.getArtist(this.state.artistId)\n            .then((artist) => {\n                if (artist) {\n                    this.setState({ ...this.state, artist })\n                    this.loadTopTracks(artist)\n                } else {\n                    // Error happened, check console. In future, display error to user?\n                }\n            })\n            .catch((error) => console.error(error))\n    }\n\n    loadTopTracks(artist: ArtistObject) {\n        ArtistService.getArtistTopTracks(artist).then((topTracks) => {\n            if (topTracks) {\n                this.setState({ ...this.state, topTracks })\n            }\n        })\n    }\n\n    onSearchSelect(artist: ArtistObject) {\n        this.setState({\n            ...this.state,\n            artist: artist,\n        })\n\n        this.loadTopTracks(artist)\n    }\n\n    render() {\n        let body\n\n        if (!this.state.artist) {\n            body = (\n                <React.Fragment>\n                    <p>No Currently Selected Artist. Try searching for one</p>\n                </React.Fragment>\n            )\n        } else {\n            const { genres, images, name, popularity } = this.state.artist\n            const coverImages = {\n                sm: images.find((image) => image.height === 160),\n                md: images.find((image) => image.height === 320),\n                lg: images.find((image) => image.height === 640),\n            }\n\n            const coverImage = coverImages.md ?? coverImages.lg ?? coverImages.sm\n            const genreBadges = genres.map((genre) => (\n                <Badge key={genre} style={{ marginRight: 5 }} variant=\"secondary\">\n                    {genre}\n                </Badge>\n            ))\n\n            body = (\n                <div>\n                    {coverImage ? <Image src={coverImage.url} /> : <p>Loading Image</p>}\n                    <Row>\n                        <Col as={\"h2\"} xs={\"auto\"}>\n                            {name}\n                        </Col>\n                        <Col>\n                            <Dropdown>\n                                <Dropdown.Toggle variant=\"Secondary\">\n                                    <ThreeDotsVertical />\n                                </Dropdown.Toggle>\n\n                                <Dropdown.Menu>\n                                    <Dropdown.Item href={this.state.artist.uri}>Open in Spotify</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col as={\"p\"}>Genres: {genreBadges}</Col>\n                    </Row>\n                    <Row>\n                        <Col as={\"p\"}> Popularity: {popularity}th Percentile </Col>\n                    </Row>\n                    <Row>\n                        <Col as={\"h3\"}>Top Tracks</Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <TrackTable tracks={this.state.topTracks} />\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                <Container fluid>{body}</Container>\n            </div>\n        )\n    }\n}\n","import { AxiosResponse } from \"axios\"\nimport { CursorPaginated, Paginated } from \"../Models/Responses/Shared\"\nimport { SimplifiedPlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\nimport { SimplifiedTrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/me\"\n\nexport default class UserEndpoints {\n    static getRecentTracks(limit: number=20, after?: number, before?: number) {\n        if (after && before) {\n            console.error(\"Can't have both after and before specified.\")\n            return\n        }\n\n        let urlParams = `?limit=${limit}`\n        if (after) urlParams += `&after=${after}`\n        else if (before) urlParams += `&before=${before}`\n\n        return axiosInstance.get<CursorPaginated<{ track: SimplifiedTrackObject }>>(`${baseURL}/player/recently-played${urlParams}`)\n    }\n\n    static getPlaylists(): Promise<AxiosResponse<Paginated<SimplifiedPlaylistObject>>> {\n        return axiosInstance.get<Paginated<SimplifiedPlaylistObject>>(`${baseURL}/playlists`)\n    }\n}","import UserEndpoints from \"../Endpoints/User\"\nimport { SimplifiedPlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\nimport { SimplifiedTrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\n\nexport default class UserService {\n    static async getRecentTracks(limit: number=20, after?: number, before?: number): Promise<SimplifiedTrackObject[]> {\n        try {\n            const response = await UserEndpoints.getRecentTracks(limit, after, before)\n            if (response) {\n                return response.data.items.map(({ track }) => {\n                    console.log(track)\n                    return track\n                })\n            }\n\n            return []\n        } catch (error) {\n            console.error(error)\n            return []\n        }\n    }\n\n    static async getPlaylists(): Promise<SimplifiedPlaylistObject[] | undefined> {\n        return UserEndpoints.getPlaylists()\n            .then(({ data: { items }}) => items)\n            .catch(error => {\n                console.error(`Failed to get users current playlists. Error: ${error}`)\n                return undefined\n            })\n    }\n}","import React from \"react\"\nimport { Card } from \"react-bootstrap\"\nimport { SimplifiedTrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport UserService from \"../../../Services/UserService\"\nimport ArtistLinks from \"../../Shared/ArtistLinks\"\n\ninterface HomePageState {\n    recentTracks: SimplifiedTrackObject[]\n}\n\nexport default class HomePage extends React.Component<{}, HomePageState> {\n    constructor(props: {}) {\n        super(props)\n        UserService.getRecentTracks(10)\n            .then((recentTracks) => {\n                this.setState({ ...this.state, recentTracks })\n            })\n            .catch((error) => {\n                console.error(error)\n            })\n\n        this.state = {\n            recentTracks: [],\n        }\n    }\n\n    render() {\n        const trackCards = this.state.recentTracks.map((track) => (\n            <Card key={track.id} className=\"p-3 m-3 d-inline-block\">\n                <Card.Body>\n                    <Card.Title>{track.name}</Card.Title>\n                    <Card.Text className=\"text-muted\">\n                        By:&nbsp;\n                        <ArtistLinks artists={track.artists} />\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        ))\n\n        return (\n            <React.Fragment>\n                <h3>Recently listened to:</h3>\n                <div className=\"w-100\" style={{ overflowX: \"auto\" }}>\n                    {trackCards}\n                </div>\n                <hr />\n            </React.Fragment>\n        )\n    }\n}\n","export const authEndpoint = \"https://accounts.spotify.com/authorize\"\n\nexport const clientId = \"a7d9f2be243d45f69ad9e83e2ef03b61\"\n\nconst prod = {\n    redirectUri: \"https://jacobhearst.github.io/spotify-playlist-plus\"\n}\n\nconst dev = {\n    redirectUri: \"http://localhost:3000/spotify-playlist-plus\"\n}\n\nexport const config = process.env.NODE_ENV == \"development\" ? dev : prod","import { AuthToken } from \"../Models/Authentication\"\nimport axios from \"axios\"\nimport { RefreshTokenRequest, GetTokenRequest } from \"../Models/Requests/AuthenticationRequests\"\n\nexport async function getAuthenticationToken(data: RefreshTokenRequest | GetTokenRequest): Promise<AuthToken | undefined> {\n    const response = await axios.post(\"https://accounts.spotify.com/api/token\", null, {\n        params: data,\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n    })\n\n    return response.data\n}","import { authEndpoint, clientId, config } from \"../Constants/Constants\"\nimport { getAuthenticationToken } from \"../Endpoints/Authorization\"\nimport { AuthToken } from \"../Models/Authentication\"\nimport { GetTokenRequest } from \"../Models/Requests/AuthenticationRequests\"\n\n// class that handles all authentication\nexport default class AuthService {\n    // scopes that are needed \n    static scopes : string[] = [\"user-modify-playback-state\", \"user-read-playback-state\", \"streaming\", \n        \"user-read-email\", \"user-read-private\", \"playlist-read-private\", \"user-read-recently-played\"]\n\n    // ########################## Cookie Creation / Retrival ###############################\n    static createCodeVerifierCookie(): string {\n        const verifier = this.randomString()\n        document.cookie = `code_verifier=${verifier}`\n\n        return verifier\n    }\n\n    static getVerifierCookie(): string | undefined {\n        // document.cookie is a 'string' representation of the cookies, seperated by '; '\n        const cookies = document.cookie.split(\"; \") // # yum\n    \n        // find the cookie that starts with code_verifier\n        const verifier = cookies.filter((cookie) => cookie.startsWith(\"code_verifier\"))\n    \n        // if it exists, return it\n        return verifier.length > 0 ? verifier[0].split(\"=\")[1] : undefined\n    }\n    // ####################################################################################\n\n\n    // ############## Verifier / Authorization URL Creation ##############################\n    static async constructAuthorizationURI(verifier: string): Promise<string> {\n        const scopeString : string = this.scopes.join(\" \")\n\n        let url = `${authEndpoint}?client_id=${clientId}&response_type=code&redirect_uri=${config.redirectUri}&scope=${encodeURIComponent(scopeString)}`\n\n        const hash = await this.sha256(verifier)\n        const code_challenge = this.base64urlencode(hash)\n\n        url += `&code_challenge_method=S256&code_challenge=${code_challenge}`\n\n        return url\n    }  \n\n    static randomString() : string {\n        let randomString : string = \"\"\n\n        // has to be between 43 - 128 according to spotify\n        const minCharacters = 43\n\n        // initalize array of length 43 and generate random values\n        const randomNumbers = new Uint8Array(minCharacters)\n        window.crypto.getRandomValues(randomNumbers)\n\n        // possible characters [A-Z], [a-z], [0-9]\n        // could also include certain characters if we wanted to make it even more secure \n        const possibleCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n\n        // going to need to convert bytes to value between 0 - possibleCharcters.length\n        const byteLength = 256\n        const offset = byteLength / possibleCharacters.length\n\n        for (var i = 0; i < minCharacters; i++) {\n            randomString += possibleCharacters[Math.floor(Math.abs(randomNumbers[i]) / offset)]\n        }\n\n        return randomString\n    }\n\n    static sha256(verifier: string) {\n        const encoder = new TextEncoder()\n        const data = encoder.encode(verifier)\n    \n        return window.crypto.subtle.digest(\"SHA-256\", data)\n    }\n\n    static base64urlencode(hash: ArrayBuffer) {\n        const values : Uint8Array = new Uint8Array(hash)\n\n        // return encoded string\n        // replace '+' with '-', '/' with '_', and remove '=' at end for url safety\n        return btoa(String.fromCharCode.apply(null, values as unknown as number[]))\n            .replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\")\n    }\n\n    // ###############################################################################################\n\n\n    // ########################### Token Retrievers ##################################################\n\n    /* eslint-disable */\n    // Disable esline or else typescript will complain about the callback signature\n    static async refreshTimer(token: AuthToken, callback: (newToken: AuthToken) => any) {\n        // refresh 5 seconds before the token expires\n        const msBeforeExpires = 5000\n        const expireTimeInMs = token.expires_in * 1000\n        const refreshTime = expireTimeInMs - msBeforeExpires\n\n        setTimeout(async () => {\n            const newToken: AuthToken | undefined = await getAuthenticationToken({\n                grant_type: \"refresh_token\",\n                refresh_token: token.refresh_token,\n                client_id: clientId\n            })\n\n            if (newToken) {\n                callback(newToken)\n            }\n\n        }, refreshTime)\n    }\n    /* eslint-enable */\n\n    static exchangeCodeForToken(code: string, verifier: string) {      \n        const data : GetTokenRequest = {\n            client_id: clientId,\n            grant_type: \"authorization_code\",\n            code: code,\n            redirect_uri: config.redirectUri,\n            code_verifier: verifier\n        } \n\n        return getAuthenticationToken(data)\n    } \n\n    // ###############################################################################################\n}\n","import { AuthToken } from \"../Models/Authentication\"\nimport { Spotify } from \"../Models/SpotifyObjects/PlayerObjects\"\n\nasync function waitForSpotify() : Promise<typeof Spotify> {\n    return new Promise((resolve) => {\n        if (window.Spotify) {\n            resolve(window.Spotify)\n        }\n        else {\n            window.onSpotifyWebPlaybackSDKReady = () => {\n                resolve(window.Spotify)\n            }\n        }\n    })\n}\n\nexport async function getSpotifyPlayer(token: AuthToken) {\n    const { Player } = await waitForSpotify()\n\n    const playerInit : Spotify.PlayerInit = {\n        name: \"SomeTool\",\n        getOAuthToken: callback => {\n            callback(token.access_token)\n        },\n        volume: .5\n    }\n\n    return new Player(playerInit)\n}","import React from \"react\"\nimport { ListGroup } from \"react-bootstrap\"\nimport { Link } from \"react-router-dom\"\nimport { SimplifiedPlaylistObject } from \"../../Models/SpotifyObjects/PlaylistObjects\"\nimport UserService from \"../../Services/UserService\"\n\ninterface PlaylistListState {\n    playlists: SimplifiedPlaylistObject[]\n}\n\nexport default class PlaylistList extends React.Component<{}, PlaylistListState> {\n    constructor(props: {}) {\n        super(props)\n        this.state = { playlists: [] }\n\n        UserService.getPlaylists().then((playlists) => {\n            if (playlists) {\n                this.setState({ ...this.state, playlists })\n            }\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h2>Playlists</h2>\n                <ListGroup>\n                    {this.state.playlists.map((playlist) => (\n                        <Link key={playlist.id} to={`/spotify-playlist-plus/Playlist/${playlist.id}`}>\n                            <ListGroup.Item>{playlist.name}</ListGroup.Item>\n                        </Link>\n                    ))}\n                </ListGroup>\n            </React.Fragment>\n        )\n    }\n}\n","import React from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { Link } from \"react-router-dom\"\n\nexport default function Navbar() {\n    const pageURL = \"/spotify-playlist-plus\"\n    return (\n        <div className=\"float-right\">\n            <Link className=\"p-2\" to={pageURL}>\n                <Button size=\"sm\" variant=\"outline-primary\">\n                    Home\n                </Button>\n            </Link>\n            <Link className=\"p-2\" to={pageURL + \"/Album\"}>\n                <Button size=\"sm\" variant=\"outline-primary\">\n                    Album Page\n                </Button>\n            </Link>\n        </div>\n    )\n}\n","import axiosInstance from \"./AxiosConfig\"\nimport { ResponseItems, ResponseObjects } from \"../Models/Custom\"\n\nconst baseURL = \"https://api.spotify.com/v1/search?\"\n\nexport default class SearchEndpoints {\n    static async GetSearchResults(query: string): Promise<Array<ResponseObjects>> {\n        const url = baseURL + query\n    \n        let responseItems : Array<ResponseObjects> = []\n    \n        try {\n            const response = await axiosInstance.get(url)\n    \n            // need to loop through and check each possible array of types that could be have returend \n            for (const i in response.data) {\n                if (response.data[i as ResponseItems]) {\n                    responseItems = responseItems.concat(response.data[i as ResponseItems]!.items)\n                }\n            }\n        }\n        catch {\n            console.log(\"Cound't retrieve search results\")\n        }\n    \n        return responseItems\n    }\n}","import React from \"react\"\nimport { InputGroup, Dropdown, FormControl, Form, Modal, Button } from \"react-bootstrap\"\nimport DropdownButton from \"react-bootstrap/DropdownButton\"\nimport SearchEndpoints from \"../../Endpoints/Search\"\nimport { ResponseObjects, SearchTypes } from \"../../Models/Custom\"\nimport { createQuery, getType } from \"../../Services/SearchService\"\nimport { Link } from \"react-router-dom\"\n\ninterface SearchBarProps {\n    artist?: boolean\n    playlist?: boolean\n    track?: boolean\n    album?: boolean\n}\n\ninterface SearchBarState {\n    items?: ResponseObjects[]\n    searchVal: string\n    showModal: boolean\n    types: {\n        artist: boolean\n        playlist: boolean\n        track: boolean\n        album: boolean\n    }\n}\n\nexport default class SearchBar extends React.Component<SearchBarProps, SearchBarState> {\n    constructor(props: SearchBarProps) {\n        super(props)\n\n        this.state = {\n            searchVal: \"\",\n            showModal: false,\n            types: {\n                artist: props.artist ?? false,\n                playlist: props.playlist ?? false,\n                track: props.track ?? false,\n                album: props.album ?? false,\n            },\n        }\n\n        this.search = this.search.bind(this)\n    }\n\n    search(e: React.KeyboardEvent): void {\n        if (e.key !== \"Enter\") {\n            return\n        }\n\n        const typesToSearch = Object.keys(this.state.types).filter((t) => this.state.types[t as SearchTypes])\n        const searchVal = (e.target as HTMLInputElement).defaultValue\n\n        SearchEndpoints.GetSearchResults(createQuery(searchVal, typesToSearch)).then((searchResponseItems) => {\n            this.setState({\n                ...this.state,\n                items: searchResponseItems,\n                showModal: true,\n            })\n        })\n    }\n\n    render() {\n        const pageURL = \"/spotify-playlist-plus\"\n\n        const searchItems = this.state.items?.map((item, i) => {\n            const type = getType(item)\n\n            return (\n                <li key={i}>\n                    <Link className=\"p-2\" to={`${pageURL}/${type}/${item.id}`}>\n                        <Button\n                            className=\"searchResultButton\"\n                            onClick={() => {\n                                this.setState({ ...this.state, showModal: false, searchVal: \"\" })\n                            }}>\n                            {`${type}: ${item.name}`}\n                        </Button>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <div>\n                <InputGroup>\n                    <DropdownButton title=\"Filter\" className=\"filter-dropdown\">\n                        <Dropdown.Divider></Dropdown.Divider>\n                        <Form.Check\n                            inline\n                            disabled={!this.props.album}\n                            checked={this.state.types.album}\n                            label=\"Album\"\n                            onChange={() => {\n                                this.setState({ types: { ...this.state.types, album: !this.state.types.album } })\n                            }}\n                        />\n                        <Form.Check\n                            inline\n                            disabled={!this.props.artist}\n                            checked={this.state.types.artist}\n                            label=\"Artist\"\n                            onChange={() => {\n                                this.setState({ types: { ...this.state.types, artist: !this.state.types.artist } })\n                            }}\n                        />\n                        <Form.Check\n                            inline\n                            disabled={!this.props.playlist}\n                            checked={this.state.types.playlist}\n                            label=\"Playlist\"\n                            onChange={() => {\n                                this.setState({ types: { ...this.state.types, playlist: !this.state.types.playlist } })\n                            }}\n                        />\n                        <Form.Check\n                            inline\n                            disabled={!this.props.track}\n                            checked={this.state.types.track}\n                            label=\"Track\"\n                            onChange={() => {\n                                this.setState({ types: { ...this.state.types, track: !this.state.types.track } })\n                            }}\n                        />\n                    </DropdownButton>\n                    <FormControl\n                        as=\"input\"\n                        placeholder=\"Search\"\n                        value={this.state.searchVal}\n                        onKeyDown={this.search}\n                        onChange={(e) => this.setState({ ...this.state, searchVal: e.target.value })}\n                    />\n                </InputGroup>\n                <Modal\n                    show={this.state.showModal}\n                    onHide={() => {\n                        this.setState({ ...this.state, showModal: false })\n                    }}>\n                    <Modal.Header>\n                        <Modal.Title>Search Results</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <ul>{searchItems}</ul>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            onClick={() => {\n                                this.setState({ ...this.state, showModal: false })\n                            }}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import { ResponseObjects } from \"../Models/Custom\"\nimport { SimplifiedAlbumObject } from \"../Models/SpotifyObjects/AlbumObjects\"\nimport { ArtistObject } from \"../Models/SpotifyObjects/ArtistObjects\"\nimport { SimplifiedPlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\nimport { TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\n\nexport function createQuery(searchVal: string, types: string[]): string {\n    let query = `q=${searchVal}`\n\n    if (types.length > 0) {\n        const typeQuery = \"&type=\" + types.join(\",\")\n        query += typeQuery\n    }\n\n    return query\n}\n\n// instanceof only works for classes so apparently this is the best way to test for interface types # rip\nexport function getType(item: ResponseObjects): string {\n    if ((item as SimplifiedAlbumObject).album_type) {\n        return \"Album\"\n    } else if ((item as ArtistObject).genres) {\n        return \"Artist\"\n    } else if ((item as SimplifiedPlaylistObject).tracks) {\n        return \"Playlist\"\n    } else if ((item as TrackObject).track_number) {\n        return \"Track\"\n    }\n\n    return \"FuNcTiOn lAcKs EnDiENg ReTuRn sTaTeMeNt\"\n}","import React from \"react\"\nimport { Route, BrowserRouter as Router } from \"react-router-dom\"\nimport \"./App.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport PlaylistPage from \"./Components/Pages/Playlist/PlaylistPage\"\nimport AlbumPage from \"./Components/Pages/Album/AlbumPage\"\nimport LandingPage from \"./Components/Shared/LandingPage\"\nimport ArtistPage from \"./Components/Pages/Artist/ArtistPage\"\nimport { AuthenticationContext, AuthenticationContextObject, TokenRetriever, AuthToken } from \"./Models/Authentication\"\nimport HomePage from \"./Components/Pages/Home/HomePage\"\nimport { initAxios } from \"./Endpoints/AxiosConfig\"\nimport AuthService from \"./Services/AuthService\"\nimport { getSpotifyPlayer } from \"./Services/PlayerService\"\nimport { Spotify } from \"./Models/SpotifyObjects/PlayerObjects\"\nimport Switch from \"react-bootstrap/esm/Switch\"\nimport { Container, Row, Col, Button } from \"react-bootstrap\"\nimport PlaylistList from \"./Components/Shared/PlaylistList\"\nimport Navbar from \"./Components/Shared/Navbar\"\nimport SearchBar from \"./Components/Shared/SearchBar\"\n\nexport default class App extends React.Component<{}, AuthenticationContextObject> {\n    constructor(props: {}) {\n        super(props)\n\n        // get cookie or create a new one\n        const verifier = AuthService.getVerifierCookie() ?? AuthService.createCodeVerifierCookie()\n\n        // try and get authorization code from url\n        const code = new URLSearchParams(window.location.search).get(\"code\")\n\n        // havn't redirected yet/ need to do first step of authorization\n        if (!code) {\n            // force reload component when we actually get the redirect url for the log in button\n            this.getAuthURL(verifier)\n        }\n        // Redirected from Spotify Auth\n        else {\n            AuthService.exchangeCodeForToken(code, verifier).then((authToken) => {\n                if (authToken) {\n                    initAxios(authToken)\n                    this.refreshTokenCallback(authToken)\n                }\n            })\n        }\n\n        this.state = {\n            logOut: () => {\n                this.getAuthURL(verifier)\n                this.setState({ ...this.state, authToken: undefined })\n            },\n        }\n    }\n\n    getAuthURL(verifier: string) {\n        AuthService.constructAuthorizationURI(verifier).then((redirect_url) => {\n            const tokenRetriever: TokenRetriever = { redirect_url, verifier }\n            this.setState({ ...this.state, tokenRetriever })\n        })\n    }\n\n    render() {\n        const pageURL = \"/spotify-playlist-plus\"\n\n        if (!this.state.authToken) {\n            return (\n                <AuthenticationContext.Provider value={this.state}>\n                    <LandingPage />\n                </AuthenticationContext.Provider>\n            )\n        }\n\n        return (\n            <AuthenticationContext.Provider value={this.state}>\n                <Router>\n                    <Container fluid className=\"h-100\">\n                        <div className=\"h-100 d-flex flex-column\">\n                            <Row id=\"navbar\">\n                                <Col>\n                                    <b>Spotify Playlist+</b>\n                                </Col>\n                                <Col>\n                                    <SearchBar artist={true} playlist={true} track={true} album={true}></SearchBar>\n                                </Col>\n                                <Col>\n                                    <Navbar />\n                                    <Button size=\"sm\" variant=\"info\" onClick={this.state.logOut} className=\"float-right\">\n                                        Log out\n                                    </Button>\n                                </Col>\n                            </Row>\n                            <Row className=\"flex-grow-1\">\n                                <Col md=\"3\" className=\"no-float pt-3\" id=\"left-content-container\">\n                                    <PlaylistList />\n                                </Col>\n                                <Col md=\"9\" className=\"no-float pt-3\">\n                                    <Switch>\n                                        <Route exact path={pageURL} component={HomePage} />\n                                        <Route exact path={pageURL + \"/Album\"} component={AlbumPage} />\n                                        <Route path={pageURL + \"/Artist/:id\"} component={ArtistPage} />\n                                        <Route path={pageURL + \"/Playlist/:id\"} component={PlaylistPage} />\n                                    </Switch>\n                                </Col>\n                            </Row>\n                        </div>\n                    </Container>\n                </Router>\n            </AuthenticationContext.Provider>\n        )\n    }\n\n    async refreshTokenCallback(token: AuthToken) {\n        const player: Spotify.SpotifyPlayer = await getSpotifyPlayer(token)\n        player.connect().catch((error) => {\n            console.error(\"Error connecting player:\", error)\n        })\n\n        player.on(\"ready\", (device) => {\n            const player = this.state.player\n            player!._options.id = device.device_id\n\n            this.setState({ ...this.state, player: player })\n        })\n\n        this.setState({ ...this.state, authToken: token, player: player })\n        AuthService.refreshTimer(token, this.refreshTokenCallback)\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}