{"version":3,"sources":["Endpoints/AxiosConfig.ts","Endpoints/Playlists.ts","Services/PlaylistService.ts","Services/Utility.ts","Constants/Symbols.ts","Endpoints/Player.ts","Models/Authentication.ts","Components/Shared/PlayerButton.tsx","Components/Shared/TrackList/TrackDropDown.tsx","Components/Shared/TrackList/TrackTableItem.tsx","Components/Shared/TrackList/TrackTable.tsx","Endpoints/Track.ts","Services/TrackService.ts","Components/Pages/Playlist/PlaylistHeader.tsx","Components/Pages/Playlist/PlaylistZeroState.tsx","Components/Pages/Playlist/PlaylistPage.tsx","Components/Pages/Album/AlbumPage.tsx","Components/Shared/LandingPage.tsx","Endpoints/Artists.ts","Services/ArtistService.ts","Components/Pages/Artist/ArtistPage.tsx","Components/Pages/Home/HomePage.tsx","Constants/Constants.ts","Endpoints/Authorization.ts","Services/AuthService.ts","Services/PlayerService.ts","Components/Shared/PlaylistList.tsx","Components/Shared/Navbar.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["axiosInstance","axios","create","interceptors","response","use","error","console","log","Promise","reject","PlaylistEndpoints","id","get","PlaylistService","getPlaylistById","then","tracks","data","items","catch","getCurrentUserPlaylists","msToSentence","ms","msInDay","msInHour","labelParts","pluralize","count","days","Math","floor","push","remainder","hours","minutes","seconds","length","join","msToTimestamp","labelValues","map","value","index","TrackSymbols","basePlaybackURL","PlayerEndpoints","device_id","uris","put","AuthenticationContext","React","createContext","undefined","PlayerButton","props","state","playerButtonClicked","bind","player","a","this","currentlyPlaying","pause","startResume","_options","updateCurrentlyPlayingCallback","Consumer","context","Button","variant","onClick","Pause","Play","Component","TrackDropDown","Dropdown","Toggle","Menu","Item","href","track","uri","TrackTableItem","artistNames","artists","artist","array","to","name","className","track_number","album","duration_ms","TrackTable","updateCurrentTrack","trackNumber","currentlyPlayingTrack","setState","Table","hover","TrackEndpoints","ids","TrackService","trackIds","slice","getAudioFeatures","audio_features","decreasing","audioFeatures","sorted","sort","b","energy","reverse","getTrackFromFeature","find","feature","filter","PlaylistHeader","playByIntensity","playlist","deviceId","intensitySort","description","owner","playlistLength","forEach","Row","style","marginBottom","Col","xs","Image","src","images","url","width","height","border","display_name","as","ButtonGroup","disabled","split","contextType","PlaylistZeroState","PlaylistPage","playlistId","match","params","loadPlaylist","prevProps","location","getPlaylist","Container","fluid","AlbumPage","LandingPage","tokenRetriever","redirect_url","baseURL","ArtistEndpoints","ArtistService","getArtistById","getArtistTopTracks","ArtistPage","artistId","loadArtist","loadTopTracks","getArtist","topTracks","Fragment","genres","popularity","coverImages","sm","image","md","lg","coverImage","genreBadges","genre","Badge","marginRight","HomePage","clientId","config","redirectUri","getAuthenticationToken","post","headers","AuthService","verifier","randomString","document","cookie","startsWith","scopeString","scopes","encodeURIComponent","sha256","hash","code_challenge","base64urlencode","randomNumbers","Uint8Array","window","crypto","getRandomValues","possibleCharacters","offset","i","abs","TextEncoder","encode","subtle","digest","values","btoa","String","fromCharCode","apply","replace","token","callback","expireTimeInMs","expires_in","refreshTime","setTimeout","grant_type","refresh_token","client_id","newToken","code","redirect_uri","code_verifier","waitForSpotify","resolve","Spotify","onSpotifyWebPlaybackSDKReady","getSpotifyPlayer","Player","playerInit","getOAuthToken","access_token","volume","PlaylistList","playlists","getUserPlaylistsList","ListGroup","Navbar","pageURL","size","App","getVerifierCookie","createCodeVerifierCookie","URLSearchParams","search","exchangeCodeForToken","authToken","defaults","common","refreshTokenCallback","getAuthURL","logOut","constructAuthorizationURI","Provider","Switch","exact","path","component","connect","on","device","refreshTimer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.955f7398.chunk.js","sourcesContent":["import axios from \"axios\"\nimport { AuthToken } from \"../Models/Authentication\"\n\nconst axiosInstance = axios.create({})\n\n// set authorization header so that we don't have to specify it with every request\nexport function initAxios(token: AuthToken) {\n    if (token) {\n        axiosInstance.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token.access_token\n    }\n}\n\n// default error handling for responses\naxiosInstance.interceptors.response.use((response) => {return response}, (error) => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\nexport default axiosInstance\n","import { AxiosResponse } from \"axios\"\nimport { GetPlaylistResponse } from \"../Models/Responses/PlaylistResponses\"\nimport { Paginated } from \"../Models/Responses/Shared\"\nimport { SimplifiedPlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/playlists\"\n\nexport default class PlaylistEndpoints {\n    static getPlaylistById(id: string) {\n        return axiosInstance.get<GetPlaylistResponse>(`${baseURL}/${id}`)\n    }\n\n    static getCurrentUserPlaylists(): Promise<AxiosResponse<Paginated<SimplifiedPlaylistObject>>> {\n        return axiosInstance.get<Paginated<SimplifiedPlaylistObject>>(\"https://api.spotify.com/v1/me/playlists\")\n    }\n}","import PlaylistEndpoints from \"../Endpoints/Playlists\"\nimport { PlaylistObject, SimplifiedPlaylistObject } from \"../Models/SpotifyObjects/PlaylistObjects\"\n\nexport default class PlaylistService {\n    static async getPlaylist(id: string): Promise<PlaylistObject | undefined> {\n        return PlaylistEndpoints.getPlaylistById(id)\n            .then((response) => {\n                const tracks = response.data.tracks.items\n                return {\n                    ...response.data,\n                    tracks\n                }\n            })\n            .catch((error) => {\n                console.error(`Failed to get playlist with id: '${id}'. Error: ${error}`)\n                return undefined\n            })\n    }\n\n    static async getUserPlaylistsList(): Promise<SimplifiedPlaylistObject[] | undefined> {\n        return PlaylistEndpoints.getCurrentUserPlaylists()\n            .then(({ data: { items }}) => items)\n            .catch((error) => {\n                console.error(`Failed to get users current playlists. Error: ${error}`)\n                return undefined\n            })\n    }\n}","/**\n * Convert a length of time in ms to a sentence\n * Ex: 1 Day, 3 Hours, 12 Minutes\n */\nexport function msToSentence(ms: number) {\n    if (ms <= 0) {\n        return undefined\n    }\n\n    const msInDay = 86400000\n    const msInHour = msInDay / 24\n    const msInMinute = msInHour / 60\n\n    const labelParts: string[] = []\n    const pluralize = (count: number) => count > 1 ? \"s\" : \"\"\n    const days = Math.floor(ms / msInDay)\n    if (days > 0) {\n        labelParts.push(`${days} Day${pluralize(days)}`)\n    }\n\n    let remainder = ms % msInDay\n    const hours = Math.floor(remainder / msInHour)\n    if (hours > 0) {\n        labelParts.push(`${hours % 24} Hour${pluralize(hours)}`)\n    }\n    \n    remainder = remainder % msInHour\n    const minutes = Math.floor(remainder / msInMinute)\n    if (minutes > 0) {\n        labelParts.push(`${minutes % 60} Minute${pluralize(minutes)}`)\n    }\n\n    remainder = remainder % msInMinute\n    const seconds = Math.floor(remainder / 1000)\n    if (labelParts.length == 0 && seconds > 0) {\n        labelParts.push(`${seconds} Second${pluralize(seconds)}`)\n    }\n\n    return labelParts.join(\", \")\n}\n\nexport function msToTimestamp(ms: number) {\n    if (ms <= 0) {\n        return undefined\n    }\n\n    const seconds = Math.floor(ms / 1000)\n    const minutes = Math.floor(seconds / 60)\n    const hours = Math.floor(minutes / 60)\n\n    const labelValues: number[] = []\n    if (hours > 0) {\n        labelValues.push(hours)\n    }\n\n    if (minutes > 0 || (hours < 1)) {\n        labelValues.push(minutes % 60)\n    }\n\n    if (seconds > 0) {\n        labelValues.push(seconds % 60)\n    }\n\n    return labelValues.map((value, index) => {\n        if (index == 0) {\n            // Short circuit for the first element because we don't want\n            // To prefix the first item in the label with a 0\n            return `${value}`\n        }\n\n        if (value < 10) {\n            return `0${value}`\n        }\n\n        return `${value}`\n    }).join(\":\")\n}","/* eslint-disable */\nexport enum TrackSymbols {\n    Play = \"\\u25B6\",\n    Pause = \"\\u23F8\",\n    Next = \"\\u23E9\",\n    Previous = \"\\u23EA\"\n}\n/* eslint-enable */\n","import axiosInstance from \"./AxiosConfig\"\nimport { StartResumeRequest } from \"../Models/Requests/PlayerRequests\"\nimport { GetPlaybackInfoResponse } from \"../Models/Responses/PlayerResponse\"\nimport { DeviceObject } from \"../Models/SpotifyObjects/SharedObjects\"\n\nconst basePlaybackURL = \"https://api.spotify.com/v1/me/player\"\n\nexport default class PlayerEndpoints {\n    static async getPlaybackInformation(): Promise<GetPlaybackInfoResponse> {\n        const response: GetPlaybackInfoResponse = await axiosInstance.get(basePlaybackURL)\n        return response\n    }\n\n    static startResume(device_id: string, uris: string[]) {\n        const data: StartResumeRequest = {\n            uris: uris\n        }\n\n        axiosInstance.put(`${basePlaybackURL}/play?device_id=${device_id}`, data)\n    }\n\n    static pause() {\n        axiosInstance.put(`${basePlaybackURL}/pause`)\n    }\n}\n\n// used these before implementing the sdk. They shouldn't be used unless we \n// would want to allow the user to transfer playback to another device and continue listening\n// eslint-disable-next-line\nasync function getAvailableDevices() {\n    const devices: DeviceObject[] = (await axiosInstance.get(`${basePlaybackURL}/devices`)).data.devices\n    return devices\n}\n\n// eslint-disable-next-line\nasync function transferPlayback(device_id: string) {\n    await axiosInstance.put(`${basePlaybackURL}`, { device_ids: [device_id] })\n}","import React from \"react\"\nimport { Spotify }  from \"../Models/SpotifyObjects/PlayerObjects\"\n\nexport interface AuthToken {\n    access_token: string\n    token_type: string\n    expires_in: number\n    refresh_token: string\n}\n\nexport interface TokenRetriever {\n    verifier: string,\n    redirect_url: string\n}\n\nexport interface AuthenticationContextObject {\n    authToken?: AuthToken,\n    player?: Spotify.SpotifyPlayer,\n    tokenRetriever?: TokenRetriever,\n    logOut: () => void\n}\n\nexport const AuthenticationContext = React.createContext<AuthenticationContextObject | undefined>(undefined)\n","import React from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { TrackSymbols } from \"../../Constants/Symbols\"\nimport PlayerEndpoints from \"../../Endpoints/Player\"\nimport { AuthenticationContext } from \"../../Models/Authentication\"\nimport { Spotify } from \"../../Models/SpotifyObjects/PlayerObjects\"\n\n/* eslint-disable */\ninterface PlayerButtonProps {\n    uris: string[]\n    updateCurrentlyPlayingCallback(trackNumber: number): void\n    index: number\n    currentlyPlaying?: boolean\n}\n/* eslint-enable */\n\ninterface PlayerButtonState extends PlayerButtonProps {}\n\nexport default class PlayerButton extends React.Component<PlayerButtonProps, PlayerButtonState> {\n    constructor(props: PlayerButtonProps) {\n        super(props)\n\n        this.state = {\n            ...props,\n        }\n\n        this.playerButtonClicked = this.playerButtonClicked.bind(this)\n    }\n\n    async playerButtonClicked(player: Spotify.SpotifyPlayer) {\n        this.props.currentlyPlaying ? PlayerEndpoints.pause() : PlayerEndpoints.startResume(player._options.id, this.state.uris)\n\n        this.props.updateCurrentlyPlayingCallback(this.props.index)\n    }\n\n    render() {\n        return (\n            <AuthenticationContext.Consumer>\n                {(context) => (\n                    <Button variant=\"outline-dark\" onClick={() => this.playerButtonClicked(context?.player!)}>\n                        {this.props.currentlyPlaying ? TrackSymbols.Pause : TrackSymbols.Play}\n                    </Button>\n                )}\n            </AuthenticationContext.Consumer>\n        )\n    }\n}\n","import React from \"react\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport { ThreeDotsVertical } from \"react-bootstrap-icons\"\nimport { Dropdown } from \"react-bootstrap\"\n\ninterface TrackDropDownProps {\n    track: TrackObject\n}\n\nexport default class TrackDropDown extends React.Component<TrackDropDownProps, {}> {\n    render() {\n        return (\n            <Dropdown>\n                <Dropdown.Toggle variant=\"Secondary\">\n                    <ThreeDotsVertical />\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    <Dropdown.Item href={this.props.track.uri}>Open in Spotify</Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        )\n    }\n}","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport { msToTimestamp } from \"../../../Services/Utility\"\nimport PlayerButton from \"../PlayerButton\"\nimport TrackDropDown from \"./TrackDropDown\"\nimport \"./TrackTable.css\"\n\ninterface TrackTableItemProps {\n    track: TrackObject\n    // eslint-disable-next-line\n    updateCurrentlyPlayingCallback(trackNumber: number): void\n    currentlyPlaying?: boolean\n    index: number\n}\n\n\nexport default class TrackTableItem extends React.Component<TrackTableItemProps, {}> {\n    render() {\n        const artistNames = this.props.track.artists.map((artist, index, array) => {\n            // Don't put a comma and space after the last artist\n            if (index == array.length - 1) {\n                return <Link key={artist.id} to={`/artists/${artist.id}`}>{artist.name}</Link>\n            }\n\n            return (\n                <span key={artist.id}>\n                    <Link to={`/artist/${artist.id}`}>{artist.name}</Link>,&nbsp;\n                </span>\n            )\n        })\n\n        return (\n            <tr>\n                <td>\n                    <PlayerButton\n                        currentlyPlaying={this.props.currentlyPlaying}\n                        uris={[this.props.track.uri]}\n                        updateCurrentlyPlayingCallback={this.props.updateCurrentlyPlayingCallback}\n                        index={this.props.index}></PlayerButton>\n                </td>\n                <td><span className=\"text-muted\">{this.props.track.track_number}</span></td>\n                <td>{this.props.track.name}</td>\n                <td>{artistNames}</td>\n                <td>{this.props.track.album?.name ?? \"No album\"}</td>\n                <td>{msToTimestamp(this.props.track.duration_ms)}</td>\n                <td><TrackDropDown track={this.props.track} /></td>\n            </tr>\n        )\n    }\n}\n","import React from \"react\"\nimport { Table } from \"react-bootstrap\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport TrackTableItem from \"./TrackTableItem\"\n\ninterface TrackTableProps {\n    tracks?: TrackObject[]\n    currentPlayingTrack?: number\n}\n\ninterface TrackTableState {\n    currentlyPlayingTrack?: number\n}\n\nexport default class TrackTable extends React.Component<TrackTableProps, TrackTableState> {\n    constructor(props: TrackTableProps) {\n        super(props)\n        this.state = { currentlyPlayingTrack: -1 }\n        this.updateCurrentTrack.bind(this)\n    }\n\n    updateCurrentTrack = (trackNumber: number) => {\n        const trackPaused = trackNumber == this.state.currentlyPlayingTrack\n        const currentlyPlayingTrack = trackPaused ? -1 : trackNumber\n\n        this.setState({ currentlyPlayingTrack })\n    }\n\n    render() {\n        if (!this.props.tracks) {\n            return <p>Loading tracks</p>\n        }\n\n        return (\n            <Table hover>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>#</th>\n                        <th>Title</th>\n                        <th>Artist(s)</th>\n                        <th>Album</th>\n                        <th>Duration</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.tracks!.map((track, index) => {\n                        console.log(track.name)\n                        return (\n                            <TrackTableItem\n                                key={`${track.id}-${index}`}\n                                track={track}\n                                index={index}\n                                updateCurrentlyPlayingCallback={this.updateCurrentTrack}\n                                currentlyPlaying={this.state.currentlyPlayingTrack == index}\n                            />\n                        )\n                    })}\n                </tbody>\n            </Table>\n        )\n    }\n}\n","import { AudioFeaturesResponse } from \"../Models/Responses/TrackResponses\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/audio-features\"\n\nexport default class TrackEndpoints {\n    static async getAudioFeatures(ids: string[]) {\n        try {\n            return axiosInstance.get<AudioFeaturesResponse>(`${baseURL}/?ids=${ids.join(\",\")}`)\n        } catch (error) {\n            console.error(`Failed to get audio features for tracks with with ids: \"${ids}\".`)\n            console.error(`Error: ${error}`)\n        }\n    }\n}","import TrackEndpoints from \"../Endpoints/Track\"\nimport { AudioFeaturesObject, TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\n\nexport default class TrackService {\n    static async getAudioFeatures(tracks: TrackObject[]): Promise<AudioFeaturesObject[]> {\n        let trackIds = tracks.map(({ id }) => id)\n        if (trackIds.length > 100) {\n            trackIds = trackIds.slice(0, 100)\n        }\n        \n        try {\n            const response = await TrackEndpoints.getAudioFeatures(trackIds)\n            if (!response) {\n                return []\n            }\n\n            return response.data.audio_features\n        } catch {\n            return []\n        }\n    }\n\n    static async intensitySort(tracks: TrackObject[], decreasing: boolean): Promise<TrackObject[]> {\n        let audioFeatures: AudioFeaturesObject[] = []\n        try {\n            audioFeatures = await TrackService.getAudioFeatures(tracks)\n        } catch (error) {\n            console.error(`Error getting audio features: ${error}`)\n            return []\n        }\n\n        const sorted = audioFeatures.sort((a, b) => a.energy - b.energy)\n        if (decreasing) {\n            sorted.reverse()\n        }\n\n        const getTrackFromFeature = ({ id }: AudioFeaturesObject) => tracks.find((track) => track.id == id)\n\n        return sorted\n            .map((feature) => getTrackFromFeature(feature))\n            // This filter removes all undefined values. Linting doesn't know that so it complains\n            .filter((track) => !!track) as TrackObject[]\n    }\n}","import React from \"react\"\nimport { Button, ButtonGroup, Col, Dropdown, Image, Row } from \"react-bootstrap\"\nimport PlayerEndpoints from \"../../../Endpoints/Player\"\nimport TrackService from \"../../../Services/TrackService\"\nimport {  CaretDownFill } from \"react-bootstrap-icons\"\nimport { AuthenticationContext } from \"../../../Models/Authentication\"\nimport { PlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\nimport { msToSentence } from \"../../../Services/Utility\"\n\ninterface PlaylistHeaderProps {\n    playlist?: PlaylistObject\n}\n\ninterface PlaylistHeaderState extends PlaylistHeaderProps {}\n\nexport default class PlaylistHeader extends React.Component<PlaylistHeaderProps, PlaylistHeaderState> {\n    static contextType = AuthenticationContext\n\n    constructor(props: PlaylistHeaderProps) {\n        super(props)\n        this.state = {\n            ...props\n        }\n\n        this.playByIntensity = this.playByIntensity.bind(this)\n    }\n\n    playByIntensity(decreasing: boolean = false) {\n        if (this.state.playlist && this.context.player) {\n            const deviceId = this.context.player._options.id\n            const tracks = this.state.playlist.tracks.map(({ track }) => track)\n            TrackService.intensitySort(tracks, decreasing).then(tracks => {\n                const uris = tracks.map(({ uri }) => uri)\n                PlayerEndpoints.startResume(deviceId, uris)\n            })\n        }\n    }\n\n    render() {\n        if (!this.props.playlist) {\n            return (\n                <p>Loading</p>\n            )\n        }\n\n        const { name, description, owner, tracks } = this.props.playlist\n\n        let playlistLength = 0\n        tracks.forEach(({ track }) => playlistLength += track.duration_ms)\n\n        return (\n            <Row style={{ marginBottom: 15 }}>\n                {/* Header */}\n                <Col xs=\"auto\">\n                    {/* Image size can be up to 640 by 640 */}\n                    <Image src={this.props.playlist.images[0].url} width={250} height={250} style={{ border: \"1px solid black\" }} />\n                </Col>\n                <Col>\n                    <h2>{name}</h2>\n                    <p>{description}</p>\n                    <p>Owned by: {owner.display_name}</p>\n                    <p>{tracks.length} Songs. {msToSentence(playlistLength)}</p>\n                    <Dropdown as={ButtonGroup}>\n                        <Button variant=\"success\" disabled>Play</Button>\n\n                        <Dropdown.Toggle split variant=\"success\">\n                            <CaretDownFill/>\n                        </Dropdown.Toggle>\n\n                        <Dropdown.Menu>\n                            {/* Is this not just the same as sorting the playlist by intensity and playing it? Shuffle doesn't seem like the right word */}\n                            <Dropdown.Item onClick={() => this.playByIntensity()}>Play by intensity (increasing)</Dropdown.Item>\n                            <Dropdown.Item onClick={() => this.playByIntensity(true)}>Play by intensity (decreasing)</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Col>\n            </Row>\n        )\n    }\n}","import React from \"react\"\n\nexport default class PlaylistZeroState extends React.Component {\n    render() {\n        return (\n            <h3>No songs in this playlist</h3>\n        )\n    }\n}","import React from \"react\"\nimport { Container } from \"react-bootstrap\"\nimport { RouteComponentProps } from \"react-router\"\nimport PlaylistService from \"../../../Services/PlaylistService\"\nimport { PlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\nimport TrackTable from \"../../Shared/TrackList/TrackTable\"\nimport PlaylistHeader from \"./PlaylistHeader\"\nimport PlaylistZeroState from \"./PlaylistZeroState\"\n\ntype PlaylistPageProps = RouteComponentProps<{ id: string }>\ninterface PlaylistPageState {\n    playlistId: string\n    playlist?: PlaylistObject\n}\n\nexport default class PlaylistPage extends React.Component<PlaylistPageProps, PlaylistPageState> {\n    constructor(props: RouteComponentProps<{ id: string }>) {\n        super(props)\n        const playlistId = props.match.params.id\n        this.state = { playlistId }\n\n        this.loadPlaylist = this.loadPlaylist.bind(this)\n        this.loadPlaylist(playlistId)\n    }\n\n    componentDidUpdate(prevProps: PlaylistPageProps) {\n        if (this.props.location !== prevProps.location) {\n            const playlistId = this.props.match.params.id\n            this.loadPlaylist(playlistId)\n        }\n    }\n\n    loadPlaylist(playlistId: string) {\n        PlaylistService.getPlaylist(playlistId).then((playlist) => {\n            if (playlist) {\n                this.setState({ playlistId, playlist })\n            } else {\n                // Error happened, check console. In future, display error to user?\n            }\n        })\n    }\n\n    render() {\n        if (!this.state.playlist) {\n            return (<PlaylistZeroState/>)\n        }\n        \n        // Extract the TrackObjects from the PlaylistTrackObjects\n        const tracks = this.state.playlist.tracks.map(({ track }) => track)\n\n        return (\n            <Container fluid>\n                <PlaylistHeader playlist={this.state.playlist}/>\n                <TrackTable tracks={tracks} />\n            </Container>\n        )\n    }\n}","import React from \"react\"\n// import { Container } from \"react-bootstrap\"\n// import { AlbumObject, AlbumType } from \"../../../Models/SpotifyObjects/AlbumObjects\"\n// import { Track } from \"../../../Models/Tracks\"\n// import PlaylistHeader from \"../Playlist/PlaylistHeader\"\n// import AlbumZeroState from \"./AlbumZeroState\"\nexport default class AlbumPage extends React.Component {\n    \n\n    render() {\n        // const { name, tracks } = this.state.album\n        // const mockTrack: Track = {\n        //     track_number: 1,\n        //     added_at: \"2/10/2021\",\n        //     artists: [],\n        //     duration_ms: 1000,\n        //     explicit: false,\n        //     href: \"link\",\n        //     id: Math.random().toString(),\n        //     is_playable: true,\n        //     name: \"My Song\",\n        //     popularity: 100\n        // }\n\n        // const mockAlbum: AlbumObject = {\n        //     album_type: AlbumType.Album,\n        //     artists: [],\n        //     genres: [\"genre\"],\n        //     href: \"href\",\n        //     id: Math.random().toString(),\n        //     images: [],\n        //     label: \"label\",\n        //     name: \"My Album Name\",\n        //     popularity: 100,\n        //     tracks:[],\n        //     release_date: \"2021\"\n\n        // }\n        \n\n        return (\n            <div>\n                <h1>Name</h1>\n                <img src=\"https://images-na.ssl-images-amazon.com/images/I/6123EInXGSL._SL1081_.jpg\" height=\"300px\" width=\"300px\"></img>\n            </div>  \n        )\n    }\n}","import React, { ReactNode } from \"react\"\nimport { Button, Container } from \"react-bootstrap\"\nimport { AuthenticationContext } from \"../../Models/Authentication\"\n\nexport default function LandingPage() {\n    return (\n        <Container fluid className=\"text-center mt-5\">\n            <h2>Spotify Playlist+</h2>\n            {logInButton()}\n        </Container>\n    )\n}\n// To view Spotify login API steps head to: https://developer.spotify.com/documentation/general/guides/authorization-guide/\n// We're using the Auth code with PKCE flow\nfunction logInButton(): ReactNode {\n    return (\n        <AuthenticationContext.Consumer>\n            {(context) => {\n                let href = undefined\n                if (context && context.tokenRetriever) {\n                    href = context.tokenRetriever.redirect_url\n                }\n\n                return (\n                    <a href={href}>\n                        <Button variant=\"outline-success\" disabled={!href}>Login</Button>\n                    </a>\n                )\n            }}\n        </AuthenticationContext.Consumer>\n    )\n}\n","import { ArtistObject } from \"../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\nimport axiosInstance from \"./AxiosConfig\"\n\nconst baseURL = \"https://api.spotify.com/v1/artists\"\n\nexport default class ArtistEndpoints {\n    static getArtistById(id: string) {\n        try {\n            return axiosInstance.get<ArtistObject>(`${baseURL}/${id}`)\n        } catch (error) {\n            console.error(`Failed to get artist with id: \"${id}\". Error: ${error}`)\n        }\n    }\n\n    static getArtistTopTracks(id: string) {\n        try {\n            // Hardcoding US market here because this is for a school project and I don't anticipate non-us spotify users using this\n            return axiosInstance.get<{ tracks: TrackObject[] }>(`${baseURL}/${id}/top-tracks?market=US`)\n        } catch (error) {\n            console.error(`Failed to get top tracks for artist with id: \"${id}. Error: ${error}`)\n        }\n    }\n}","import ArtistEndpoints from \"../Endpoints/Artists\"\nimport { ArtistObject } from \"../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../Models/SpotifyObjects/TrackObjects\"\n\nexport default class ArtistService {\n    static async getArtist(id: string): Promise<ArtistObject | undefined> {\n        const response = await ArtistEndpoints.getArtistById(id)\n        if (!response) {\n            return\n        }\n\n        return response.data\n    }\n\n    static async getArtistTopTracks({ id }: ArtistObject): Promise<TrackObject[] | undefined> {\n        const response = await ArtistEndpoints.getArtistTopTracks(id)\n        if (!response) {\n            return\n        }\n\n        return response.data.tracks\n    }\n}","import React from \"react\"\nimport { Badge, Col, Dropdown, Image, Row } from \"react-bootstrap\"\nimport { Container } from \"react-bootstrap\"\nimport { ThreeDotsVertical } from \"react-bootstrap-icons\"\nimport { match } from \"react-router-dom\"\nimport { ArtistObject } from \"../../../Models/SpotifyObjects/ArtistObjects\"\nimport { TrackObject } from \"../../../Models/SpotifyObjects/TrackObjects\"\nimport ArtistService from \"../../../Services/ArtistService\"\nimport TrackTable from \"../../Shared/TrackList/TrackTable\"\n\ninterface ArtistPageProps {\n    match: match<{ id: string }>\n}\n\ninterface ArtistPageState {\n    artist?: ArtistObject,\n    topTracks?: TrackObject[],\n    artistId: string\n}\n\nexport default class ArtistPage extends React.Component<ArtistPageProps, ArtistPageState> {\n    constructor(props: ArtistPageProps) {\n        super(props)\n        this.state = {\n            artistId: props.match.params.id\n        }\n\n        this.loadArtist = this.loadArtist.bind(this)\n        this.loadTopTracks = this.loadTopTracks.bind(this)\n        this.loadArtist()\n    }\n\n    loadArtist() {\n        ArtistService.getArtist(this.state.artistId).then((artist) => {\n            if (artist) {\n                this.setState({ ...this.state, artist })\n                this.loadTopTracks(artist)\n            } else {\n                // Error happened, check console. In future, display error to user?\n            }\n        }).catch(error => console.error(error))\n    }\n\n    loadTopTracks(artist: ArtistObject) {\n        ArtistService.getArtistTopTracks(artist).then((topTracks) => {\n            if (topTracks) {\n                this.setState({ ...this.state, topTracks })\n            }\n        })\n    }\n\n    render() {\n        if (!this.state.artist) {\n            return (\n                <React.Fragment>\n                    <p>Loading Artist</p>\n                </React.Fragment>\n            )\n        }\n\n        const { genres, images, name, popularity } = this.state.artist\n        const coverImages = {\n            sm: images.find(image => image.height === 160),\n            md: images.find(image => image.height === 320),\n            lg: images.find(image => image.height === 640),\n        }\n\n        const coverImage = coverImages.md ?? coverImages.lg ?? coverImages.sm\n        const genreBadges = genres.map((genre) => (\n            <Badge key={genre} style={{marginRight: 5}} variant=\"secondary\">{genre}</Badge>\n        ))\n\n        return (\n            <Container fluid>\n                {coverImage ?\n                    <Image src={coverImage.url} />\n                    : <p>Loading Image</p>\n                }\n                <Row>\n                    <Col as={\"h2\"} xs={\"auto\"}>{name}</Col>\n                    <Col>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"Secondary\">\n                                <ThreeDotsVertical />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                <Dropdown.Item href={this.state.artist.uri}>Open in Spotify</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col as={\"p\"}>Genres: {genreBadges}</Col>\n                </Row>\n                <Row>\n                    <Col as={\"p\"}> Popularity: {popularity}th Percentile </Col>\n                </Row>\n                <Row>\n                    <Col as={\"h3\"}>Top Tracks</Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <TrackTable tracks={this.state.topTracks} />\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n","import React from \"react\"\nimport { AuthenticationContext } from \"../../../Models/Authentication\"\n\nexport default class HomePage extends React.Component {\n    static contextType = AuthenticationContext\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1>Home page</h1>\n            </React.Fragment>\n        )\n    }\n}","export const authEndpoint = \"https://accounts.spotify.com/authorize\"\n\nexport const clientId = \"a7d9f2be243d45f69ad9e83e2ef03b61\"\n\nconst prod = {\n    redirectUri: \"https://jacobhearst.github.io/spotify-playlist-plus\"\n}\n\nconst dev = {\n    redirectUri: \"http://localhost:3000/spotify-playlist-plus\"\n}\n\n// export const scopes = [\n//     \"user-top-read\",\n//     \"user-read-currently-playing\",\n//     \"user-read-playback-state\",\n// ]\n\nexport const config = process.env.NODE_ENV == \"development\" ? dev : prod","import { AuthToken } from \"../Models/Authentication\"\nimport axios from \"axios\"\nimport { RefreshTokenRequest, GetTokenRequest } from \"../Models/Requests/AuthenticationRequests\"\n\nexport async function getAuthenticationToken(data: RefreshTokenRequest | GetTokenRequest): Promise<AuthToken | undefined> {\n    const response = await axios.post(\"https://accounts.spotify.com/api/token\", null, {\n        params: data,\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n    })\n\n    return response.data\n}","import { authEndpoint, clientId, config } from \"../Constants/Constants\"\nimport { getAuthenticationToken } from \"../Endpoints/Authorization\"\nimport { AuthToken } from \"../Models/Authentication\"\nimport { GetTokenRequest } from \"../Models/Requests/AuthenticationRequests\"\n\n// class that handles all authentication\nexport default class AuthService {\n    // scopes that are needed \n    static scopes : string[] = [\"user-modify-playback-state\", \"user-read-playback-state\", \"streaming\", \n        \"user-read-email\", \"user-read-private\", \"playlist-read-private\"]\n\n    constructor() {}\n\n    // ########################## Cookie Creation / Retrival ###############################\n    static createCodeVerifierCookie(): string {\n        const verifier = this.randomString()\n        document.cookie = `code_verifier=${verifier}`\n\n        return verifier\n    }\n\n    static getVerifierCookie(): string | undefined {\n        // document.cookie is a 'string' representation of the cookies, seperated by '; '\n        const cookies = document.cookie.split(\"; \") // # yum\n    \n        // find the cookie that starts with code_verifier\n        const verifier = cookies.filter((cookie) => cookie.startsWith(\"code_verifier\"))\n    \n        // if it exists, return it\n        return verifier.length > 0 ? verifier[0].split(\"=\")[1] : undefined\n    }\n    // ####################################################################################\n\n\n    // ############## Verifier / Authorization URL Creation ##############################\n    static async constructAuthorizationURI(verifier: string): Promise<string> {\n        const scopeString : string = this.scopes.join(\" \")\n\n        let url = `${authEndpoint}?client_id=${clientId}&response_type=code&redirect_uri=${config.redirectUri}&scope=${encodeURIComponent(scopeString)}`\n\n        const hash = await this.sha256(verifier)\n        const code_challenge = this.base64urlencode(hash)\n\n        url += `&code_challenge_method=S256&code_challenge=${code_challenge}`\n\n        return url\n    }  \n\n    static randomString() : string {\n        let randomString : string = \"\"\n\n        // has to be between 43 - 128 according to spotify\n        const minCharacters = 43\n\n        // initalize array of length 43 and generate random values\n        const randomNumbers = new Uint8Array(minCharacters)\n        window.crypto.getRandomValues(randomNumbers)\n\n        // possible characters [A-Z], [a-z], [0-9]\n        // could also include certain characters if we wanted to make it even more secure \n        const possibleCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n\n        // going to need to convert bytes to value between 0 - possibleCharcters.length\n        const byteLength = 256\n        const offset = byteLength / possibleCharacters.length\n\n        for (var i = 0; i < minCharacters; i++) {\n            randomString += possibleCharacters[Math.floor(Math.abs(randomNumbers[i]) / offset)]\n        }\n\n        return randomString\n    }\n\n    static sha256(verifier: string) {\n        const encoder = new TextEncoder()\n        const data = encoder.encode(verifier)\n    \n        return window.crypto.subtle.digest(\"SHA-256\", data)\n    }\n\n    static base64urlencode(hash: ArrayBuffer) {\n        const values : Uint8Array = new Uint8Array(hash)\n\n        // return encoded string\n        // replace '+' with '-', '/' with '_', and remove '=' at end for url safety\n        return btoa(String.fromCharCode.apply(null, values as unknown as number[]))\n            .replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\")\n    }\n\n    // ###############################################################################################\n\n\n    // ########################### Token Retrievers ##################################################\n\n    /* eslint-disable */\n    // Disable esline or else typescript will complain about the callback signature\n    static async refreshTimer(token: AuthToken, callback: (newToken: AuthToken) => any) {\n        // refresh 5 seconds before the token expires\n        const msBeforeExpires = 5000\n        const expireTimeInMs = token.expires_in * 1000\n        const refreshTime = expireTimeInMs - msBeforeExpires\n\n        setTimeout(async () => {\n            const newToken: AuthToken | undefined = await getAuthenticationToken({\n                grant_type: \"refresh_token\",\n                refresh_token: token.refresh_token,\n                client_id: clientId\n            })\n\n            if (newToken) {\n                callback(newToken)\n            }\n\n        }, refreshTime)\n    }\n    /* eslint-enable */\n\n    static exchangeCodeForToken(code: string, verifier: string) {      \n        const data : GetTokenRequest = {\n            client_id: clientId,\n            grant_type: \"authorization_code\",\n            code: code,\n            redirect_uri: config.redirectUri,\n            code_verifier: verifier\n        } \n\n        return getAuthenticationToken(data)\n    } \n\n    // ###############################################################################################\n}\n","import { AuthToken } from \"../Models/Authentication\"\nimport { Spotify } from \"../Models/SpotifyObjects/PlayerObjects\"\n\nasync function waitForSpotify() : Promise<typeof Spotify> {\n    return new Promise((resolve) => {\n        if (window.Spotify) {\n            resolve(window.Spotify)\n        }\n        else {\n            window.onSpotifyWebPlaybackSDKReady = () => {\n                resolve(window.Spotify)\n            }\n        }\n    })\n}\n\nexport async function getSpotifyPlayer(token: AuthToken) {\n    const { Player } = await waitForSpotify()\n\n    const playerInit : Spotify.PlayerInit = {\n        name: \"SomeTool\",\n        getOAuthToken: callback => {\n            callback(token.access_token)\n        },\n        volume: .5\n    }\n\n    return new Player(playerInit)\n}","import React from \"react\"\nimport { ListGroup } from \"react-bootstrap\"\nimport { Link } from \"react-router-dom\"\nimport { SimplifiedPlaylistObject } from \"../../Models/SpotifyObjects/PlaylistObjects\"\nimport PlaylistService from \"../../Services/PlaylistService\"\n\ninterface PlaylistListState {\n    playlists: SimplifiedPlaylistObject[]\n}\n\nexport default class PlaylistList extends React.Component<{}, PlaylistListState> {\n    constructor(props: {}) {\n        super(props)\n        this.state = { playlists: [] }\n\n        PlaylistService.getUserPlaylistsList().then((playlists) => {\n            if (playlists) {\n                this.setState({ ...this.state, playlists })\n            }\n        })\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <h2>Playlists</h2>\n                <ListGroup>\n                    {this.state.playlists.map((playlist) => (\n                        <Link key={playlist.id} to={`/spotify-playlist-plus/playlist/${playlist.id}`}>\n                            <ListGroup.Item>{playlist.name}</ListGroup.Item>\n                        </Link>\n                    ))}\n                </ListGroup>\n            </React.Fragment>\n        )\n    }\n}","import React from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { Link } from \"react-router-dom\"\n\nexport default function Navbar() {\n    const pageURL = \"/spotify-playlist-plus\"\n    return (\n        <div className=\"float-right\">\n            <Link className=\"p-2\" to={pageURL}>\n                <Button size=\"sm\" variant=\"outline-primary\">Home</Button>\n            </Link>\n            <Link className=\"p-2\" to={pageURL+\"/AlbumPage\"}>\n                <Button size=\"sm\" variant=\"outline-primary\">Album Page</Button>\n            </Link>\n        </div>      \n    )\n}","import React from \"react\"\nimport { Route, BrowserRouter as Router } from \"react-router-dom\"\nimport \"./App.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport PlaylistPage from \"./Components/Pages/Playlist/PlaylistPage\"\nimport AlbumPage from \"./Components/Pages/Album/AlbumPage\"\nimport LandingPage from \"./Components/Shared/LandingPage\"\nimport ArtistPage from \"./Components/Pages/Artist/ArtistPage\"\nimport { AuthenticationContext, AuthenticationContextObject, TokenRetriever, AuthToken } from \"./Models/Authentication\"\nimport HomePage from \"./Components/Pages/Home/HomePage\"\nimport { initAxios } from \"./Endpoints/AxiosConfig\"\nimport AuthService from \"./Services/AuthService\"\nimport { getSpotifyPlayer } from \"./Services/PlayerService\"\nimport { Spotify } from \"./Models/SpotifyObjects/PlayerObjects\"\nimport Switch from \"react-bootstrap/esm/Switch\"\nimport { Container, Row, Col, Button } from \"react-bootstrap\"\nimport PlaylistList from \"./Components/Shared/PlaylistList\"\nimport Navbar from \"./Components/Shared/Navbar\"\n\nexport default class App extends React.Component<{}, AuthenticationContextObject> {\n    constructor(props: {}) {\n        super(props)\n\n        // get cookie or create a new one\n        const verifier = AuthService.getVerifierCookie() ?? AuthService.createCodeVerifierCookie()\n\n        // try and get authorization code from url\n        const code = new URLSearchParams(window.location.search).get(\"code\")\n\n        // havn't redirected yet/ need to do first step of authorization\n        if (!code) {\n            // force reload component when we actually get the redirect url for the log in button\n            this.getAuthURL(verifier)\n        }\n        // Redirected from Spotify Auth\n        else {\n            AuthService.exchangeCodeForToken(code, verifier).then((authToken) => {\n                if (authToken) {\n                    initAxios(authToken)\n                    this.refreshTokenCallback(authToken)\n                }\n            })\n        }\n\n        this.state = {\n            logOut: () => {\n                this.getAuthURL(verifier)\n                this.setState({ ...this.state, authToken: undefined })\n            },\n        }\n    }\n\n    getAuthURL(verifier: string) {\n        AuthService.constructAuthorizationURI(verifier).then((redirect_url) => {\n            const tokenRetriever: TokenRetriever = { redirect_url, verifier }\n            this.setState({ ...this.state, tokenRetriever })\n        })\n    }\n\n    render() {\n        const pageURL = \"/spotify-playlist-plus\"\n\n        if (!this.state.authToken) {\n            return <AuthenticationContext.Provider value={this.state}>\n                <LandingPage />\n            </AuthenticationContext.Provider>\n        }\n\n        return (\n            <AuthenticationContext.Provider value={this.state}>\n                <Router>\n                    <Container fluid className=\"h-100\">\n                        <div className=\"h-100 d-flex flex-column\">\n                            <Row id=\"navbar\">\n                                <Col>\n                                    <b>Spotify Playlist+</b>\n                                </Col>\n                                <Col>\n                                    <Navbar />\n                                    <Button size=\"sm\" variant=\"info\" onClick={this.state.logOut} className=\"float-right\">Log out</Button>\n                                </Col>\n                            </Row>\n                            <Row className=\"flex-grow-1\">\n                                <Col md=\"3\" className=\"no-float pt-3\" id=\"left-content-container\">\n                                    <PlaylistList />\n                                </Col>\n                                <Col md=\"9\" className=\"no-float pt-3\">\n                                    <Switch>\n                                        <Route exact path={pageURL} component={HomePage} />\n                                        <Route exact path={pageURL + \"/AlbumPage\"} component={AlbumPage} />\n                                        <Route path={pageURL + \"/artist/:id\"} component={ArtistPage} />\n                                        <Route path={pageURL + \"/playlist/:id\"} component={PlaylistPage} />\n                                    </Switch>\n                                </Col>\n                            </Row>\n                        </div>\n                    </Container>\n                </Router>\n\n            </AuthenticationContext.Provider>\n        )\n    }\n\n    async refreshTokenCallback(token: AuthToken) {\n        const player: Spotify.SpotifyPlayer = await getSpotifyPlayer(token)\n        player.connect().catch((error) => {\n            console.error(\"Error connecting player:\", error)\n        })\n\n        player.on(\"ready\", (device) => {\n            const player = this.state.player\n            player!._options.id = device.device_id\n\n            this.setState({ ...this.state, player: player })\n        })\n\n        this.setState({ ...this.state, authToken: token, player: player })\n        AuthService.refreshTimer(token, this.refreshTokenCallback)\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}