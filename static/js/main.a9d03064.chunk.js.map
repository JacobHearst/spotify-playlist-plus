{"version":3,"sources":["Components/Shared/Navbar.tsx","Components/Pages/Playlist/PlaylistPage.tsx","Components/Pages/Album/AlbumPage.tsx","Models/Authentication.ts","Components/Shared/LandingPage.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Navbar","pageURL","to","PlaylistPage","props","state","Container","fluid","React","Component","AlbumPage","src","height","width","AuthenticationContext","createContext","undefined","LandingPage","context","useContext","location","search","token","URLSearchParams","get","authObj","access_token","loggedIn","href","authEndpoint","App","Provider","value","this","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kTAGe,SAASA,IACpB,IAAMC,EAAU,yBAChB,OACI,gCACI,cAAC,IAAD,CAAMC,GAAID,EAAV,mBACA,cAAC,IAAD,CAAMC,GAAID,EAAQ,aAAlB,yBACA,cAAC,IAAD,CAAMC,GAAID,EAAS,gBAAnB,+B,ICMSE,E,kDACjB,WAAYC,GAA2B,IAAD,8BAClC,cAAMA,IACDC,MAAL,eACOD,GAH2B,E,qDAuBlC,OACI,cAACE,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,cAACP,EAAD,U,GA1B0BQ,IAAMC,WCR3BC,E,uKAkCb,OACI,gCACI,cAACV,EAAD,IACA,sCACA,qBAAKW,IAAI,4EAA4EC,OAAO,QAAQC,MAAM,iB,GAtCnFL,IAAMC,WCQhCK,EAAwBN,IAAMO,mBAAuDC,GCPnF,SAASC,EAAYb,GAChC,IAAIc,EAAUC,qBAAWL,GAGzB,GAA8B,KAA1BV,EAAMgB,SAASC,OAAe,CAC9B,IAAMC,EAAQ,IAAIC,gBAAgBnB,EAAMgB,SAASC,QAAQG,IAAI,QAGzDF,GAASJ,IACTA,EAAQO,QAAQC,aAAeJ,GAIvC,OACI,gCACI,uDACA,cAACtB,EAAD,IACC2B,EAAST,GAAW,wBAWzB,mBAAGU,KAAMC,gKAAT,SACI,wDAPZ,SAASF,EAAST,GAA4D,IAAD,EACzE,QAAQ,iBAAEA,QAAF,IAAEA,OAAF,EAAEA,EAASO,QAAQC,oBAAnB,W,ICtBSI,E,4MACjBzB,MAAQ,CACJoB,QAAS,I,uDAIT,IAAMxB,EAAU,yBAChB,OACI,+BACI,cAACa,EAAsBiB,SAAvB,CAAgCC,MAAOC,KAAK5B,MAA5C,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO6B,OAAK,EAACC,KAAMlC,EAASmC,UAAWnB,IACvC,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAMlC,EAAU,aAAcmC,UAAW1B,IACtD,cAAC,IAAD,CAAOwB,OAAK,EAACC,KAAMlC,EAAU,gBAAiBmC,UAAWjC,e,GAbhDK,IAAMC,WCGxB4B,EAZS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCApBQ,IAASC,OACL,cAAC,IAAD,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.a9d03064.chunk.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nexport default function Navbar() {\n    const pageURL = \"/spotify-playlist-plus\"\n    return (\n        <div>     \n            <Link to={pageURL}>Home </Link>\n            <Link to={pageURL+\"/AlbumPage\"}>Album Page </Link>\n            <Link to={pageURL+ \"/PlaylistPage\"}>Playlist Page </Link>\n        </div>      \n    )\n}","import React from \"react\"\nimport { Container } from \"react-bootstrap\"\nimport { PlaylistObject } from \"../../../Models/SpotifyObjects/PlaylistObjects\"\n//import { Track } from \"../../../Models/Tracks\"\nimport Navbar from \"../../Shared/Navbar\"\n// import PlaylistTrackList from \"../../Shared/TrackList/TrackTable\"\n// import PlaylistHeader from \"./PlaylistHeader\"\n// import PlaylistZeroState from \"./PlaylistZeroState\"\n\ninterface PlaylistPageProps {\n    playlist: PlaylistObject\n}\n\ninterface PlaylistPageState extends PlaylistPageProps { }\n\nexport default class PlaylistPage extends React.Component<PlaylistPageProps, PlaylistPageState> {\n    constructor(props: PlaylistPageProps) {\n        super(props)\n        this.state = {\n            ...props\n        }\n    }\n\n    render() {\n        // const mockTrack: Track = {\n        //     track_number: 1,\n        //     added_at: \"2/10/2021\",\n        //     artists: [],\n        //     duration_ms: 1000,\n        //     explicit: false,\n        //     href: \"link\",\n        //     id: Math.random().toString(),\n        //     is_playable: true,\n        //     name: \"My Song\",\n        //     popularity: 100\n        // }\n\n        //const mockTrack2 = { ...mockTrack, id: Math.random().toString() }\n\n        return (\n            <Container fluid>\n                <Navbar/>\n                {/* <PlaylistHeader playlist={this.state.playlist}/>\n                {\n                    this.state.playlist.tracks.length > 0\n                        ? <PlaylistTrackList tracks={[mockTrack, mockTrack2]} />\n                        : <PlaylistZeroState/>\n                } */}\n            </Container>\n        )\n    }\n}","import React from \"react\"\n// import { Container } from \"react-bootstrap\"\n// import { AlbumObject, AlbumType } from \"../../../Models/SpotifyObjects/AlbumObjects\"\n// import { Track } from \"../../../Models/Tracks\"\n// import PlaylistHeader from \"../Playlist/PlaylistHeader\"\n// import AlbumZeroState from \"./AlbumZeroState\"\nimport Navbar from \"../../Shared/Navbar\"\nexport default class AlbumPage extends React.Component {\n    \n\n    render() {\n        // const { name, tracks } = this.state.album\n        // const mockTrack: Track = {\n        //     track_number: 1,\n        //     added_at: \"2/10/2021\",\n        //     artists: [],\n        //     duration_ms: 1000,\n        //     explicit: false,\n        //     href: \"link\",\n        //     id: Math.random().toString(),\n        //     is_playable: true,\n        //     name: \"My Song\",\n        //     popularity: 100\n        // }\n\n        // const mockAlbum: AlbumObject = {\n        //     album_type: AlbumType.Album,\n        //     artists: [],\n        //     genres: [\"genre\"],\n        //     href: \"href\",\n        //     id: Math.random().toString(),\n        //     images: [],\n        //     label: \"label\",\n        //     name: \"My Album Name\",\n        //     popularity: 100,\n        //     tracks:[],\n        //     release_date: \"2021\"\n\n        // }\n        \n\n        return (\n            <div>\n                <Navbar></Navbar>  \n                <h1>Name</h1>\n                <img src=\"https://images-na.ssl-images-amazon.com/images/I/6123EInXGSL._SL1081_.jpg\" height=\"300px\" width=\"300px\"></img>\n            </div>  \n        )\n    }\n}","import React from \"react\"\n\n// all possible authentication properties that can be returned\nexport interface AuthenticationObject {\n    access_token?: string,\n    token_type?: string,\n    scope?: string,\n    expires_in?: number,\n    refresh_token?: string\n}\n\nexport interface AuthenticationContextObject {\n    authObj : AuthenticationObject,\n}\n\nexport const AuthenticationContext = React.createContext<AuthenticationContextObject | undefined>(undefined)\n","import React, { ReactNode, useContext } from \"react\"\nimport Navbar from \"./Navbar\"\nimport { AuthenticationContext, AuthenticationContextObject } from \"../../Models/Authentication\"\nimport { authEndpoint, clientId, redirectUri } from \"../../Constants/Constants\"\nimport { RouteProps } from \"../../Models/RouteObjects\"\n\n//to view Spotify login API steps head to: https://developer.spotify.com/documentation/general/guides/authorization-guide/\n\nexport default function LandingPage(props: RouteProps) {\n    var context = useContext(AuthenticationContext)\n\n    // True => redirecting back after logging in\n    if (props.location.search !== \"\") {\n        const token = new URLSearchParams(props.location.search).get(\"code\")\n\n        // can't use '!' for some reason. gotta check the old fashion way or else typescript throws a fit :(\n        if (token && context) {\n            context.authObj.access_token = token\n        }\n    }\n\n    return (\n        <div>\n            <h2>Spotify Playlist Plus</h2>\n            <Navbar></Navbar>\n            {loggedIn(context) ? <div></div> : logInButton()}\n        </div>\n    )\n}\n\nfunction loggedIn(context: AuthenticationContextObject | undefined): Boolean {\n    return !!(context?.authObj.access_token ?? false)\n}\n\nfunction logInButton(): ReactNode {\n    return (\n        <a href={authEndpoint + \"?client_id=\" + clientId + \"&response_type=code&redirect_uri=\" + redirectUri}>\n            <button>Spotify Login</button>\n        </a>\n    )\n}\n","import React from \"react\"\nimport { Route, Switch } from \"react-router-dom\"\nimport \"./App.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport PlaylistPage from \"./Components/Pages/Playlist/PlaylistPage\"\nimport AlbumPage from \"./Components/Pages/Album/AlbumPage\"\nimport LandingPage from \"./Components/Shared/LandingPage\"\nimport { AuthenticationContext } from \"./Models/Authentication\"\n\nexport default class App extends React.Component {\n    state = {\n        authObj: {},\n    }\n\n    render() {\n        const pageURL = \"/spotify-playlist-plus\"\n        return (\n            <main>\n                <AuthenticationContext.Provider value={this.state}>\n                    <Switch>\n                        <Route exact path={pageURL} component={LandingPage} />\n                        <Route exact path={pageURL + \"/AlbumPage\"} component={AlbumPage} />\n                        <Route exact path={pageURL + \"/PlaylistPage\"} component={PlaylistPage} />\n                    </Switch>\n                </AuthenticationContext.Provider>\n            </main>\n        )\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}